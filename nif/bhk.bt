//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: bhk.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    // layer, flags, and group are all packed into one int in-engine
    // filter = layer | ((part | (group << 8)) << 8);
    // layer = filter & 0x7F
    if ( stream < 83 )
        FO3Layer layer;
    else if ( stream == 83 || stream == 100 )
        SkyrimLayer layer;
    else
        OblivionLayer layer;
    BipedPart flags;
    ushort group;
} HavokFilter <name="Filter", open=true>;


typedef struct {
    uint data;
    uint size;
    uint capacityAndFlags; // capacity = n & 0x3FFFFFFF
} hkWorldObjCinfoProperty;

typedef struct {
    Ref shape;
    // hkWorldObjectCinfo
    HavokFilter filter;
    int unkInt1;
    BroadPhaseType broadPhaseType;
    byte unkBytes[3];
    hkWorldObjCinfoProperty prop;
    // end hkWorldObjectCinfo
} bhkWorldObject <open=true>;

typedef struct {
    bhkWorldObject obj;
    // hkEntityCinfo
    hkResponseType collisionResponse;
    ubyte unknownByte;
    ushort processContactCallbackDelay;
    // bhkRigidBodyCinfo
    uint unkInt2;
    HavokFilter filter;
    uint unkInt3;
    if ( stream > 34 ) {
        uint unkInt4;
        Assert( unkInt4 == 0, "bhkRigidBody unkInt4 is non-zero" );
    }

    hkResponseType collisionResponse2;
    ubyte unknownByte2;
    ushort processContactCallbackDelay2;
    Assert( collisionResponse == collisionResponse2, "Collision Response and copy are not equal" );
    Assert( processContactCallbackDelay == processContactCallbackDelay2, "Callback Delay and copy are not equal" );

    if ( stream < 83 )
        uint unkInt5;

    Vec4 position;
    QuatXYZW rotation;
    Vec4 linearVelocity;
    Vec4 angularVelocity;
    Matrix43 inertiaTensor;
    Vec4 centerOfMass;
    float mass;
    float linearDamping;
    float angularDamping;

    if ( stream > 34 ) {
        float timeFactor;
        float gravityFactor;
    }

    float friction;
    if ( stream > 34 )
        float rollingFrictionMult;
    float restitution;
    float maxLinearVelocity;
    float maxAngularVelocity;
    float allowedPenetrationDepth;
    MotionType motionSystem;
    if ( stream > 34 )
        bool enableDeactivation;
    else
        byte deactivatorType;
    SolverDeactivation solverDeactivation;
    byte qualityType;
    byte autoRemoveLevel;
    byte responseModifierFlags;
    byte numShapeKeysInContactPointProps;
    bool forceCollideOntoPpu;
    uint unkInt5;
    uint unkInt6;
    if ( stream > 34 )
        uint unkInt7;
    // end bhkSerializable
    RefArray constraints( "Action Constraints" );
    
    if ( stream >= 76 )
        ushort flags;
    else
        uint flags;
} bhkRigidBody <name="bhkRigidBody">;

typedef bhkRigidBody bhkRigidBodyT <name="bhkRigidBodyT">;

// OBJECTS

/*
    active = 0x1,
    notify = 0x4,
    setLocal = 0x8,
    debugDisplay = 0x10,
    useVel = 0x20,
    reset = 0x40,
    syncOnUpdate = 0x80,
    animTargeted = 0x400,
    dismemberedLimb = 0x800
*/

typedef struct {
    Ref target;
    ushort flags;
    Ref body;
} bhkCollisionObj <name="bhkCollisionObject">;

typedef struct {
    Ref target;
    ushort flags;
    Ref data;
    uint bodyID;
} bhkNPCollObj <name="bhkNPCollisionObject">;

typedef bhkCollisionObj bhkSPCollObj <name="bhkSPCollisionObject">;
typedef bhkCollisionObj bhkPCollObj <name="bhkPCollisionObject">;

typedef struct {
    bhkCollisionObj base <open=true>;
    float heirGain;
    float velGain;
} bhkBlendCollisionObj <name="bhkBlendCollisionObject">;


// SHAPES

typedef struct {
    RefArray shape( "Shape" );
    uint HavokMaterial; // enum
    hkWorldObjCinfoProperty childShapeProp;
    hkWorldObjCinfoProperty childFilterProp;
    uint numUnkInt;
    if ( numUnkInt > 0 )
        uint unkInt[numUnkInt];
    Assert( shape.size == numUnkInt, "numShapes != numUnkInt" );
} bhkListShape <name="bhkListShape">;

typedef struct {
    uint HavokMaterial; // enum
    float radius;
} bhkConvexShape <open=true>; // Abstract

typedef struct {
    uint HavokMaterial;
    Vec3 unkVec;
    Vec3 direction;
    float constant;
    Vec4 halfExtents;
    Vec4 center;
} bhkPlaneShape <name="bhkPlaneShape">;

typedef bhkConvexShape bhkSphereShape <name="bhkSphereShape", open=false>;

typedef struct {
    bhkConvexShape shape;
    uint64 padding; // The following hkVector4 wants to be aligned at 16 bytes
    Vec3 dimensions;
    float radius;
} bhkBoxShape <name="bhkBoxShape">;

typedef struct {
    bhkConvexShape shape;
    uint64 padding; // The following hkVector4 wants to be aligned at 16 bytes
    Vec3 point1;
    float radius1;
    Vec3 point2;
    float radius2;
} bhkCapsuleShape <name="bhkCapsuleShape">;

typedef struct {
    bhkWorldObject obj;
    uint64 padding;
    Matrix44 transform;
} bhkSSPhantom <name="bhkSimpleShapePhantom">;

typedef struct {
    bhkConvexShape shape;
    hkWorldObjCinfoProperty vertsProp;
    hkWorldObjCinfoProperty normalsProp;
    // hkArray<hkFourTransposedPointsf,hkContainerHeapAllocator> m_rotatedVertices;
    uint numVerts;
    if ( numVerts > 0 )
        Vec4 verts[numVerts] <optimize=true>;
    // hkArray<hkVector4f,hkContainerHeapAllocator> m_planeEquations;
    uint numNormals;
    if ( numNormals > 0 )
        Vec4 normals[numNormals] <optimize=true>;
} bhkCVS <name="bhkConvexVerticesShape">;

typedef struct {
    Ref shape;
    uint HavokMaterial; // Enum
    float radius;
    uint64 padding;
    Matrix44 transform;
} bhkTS <name="bhkTransformShape">;

typedef bhkTS bhkCTS <name="bhkConvexTransformShape">;

typedef struct {
    // Cinfo size 48
    uint HavokMaterial; // Enum
    float radius;
    uint unused1;
    uint unused2;
    uint unused3; // maxSize;
    uint unused4; // size;
    uint unused5; // eSize;
    uint growBy;
    Vec4 scale; // End Cinfo
    RefArray part( "Part" );
    uint numFilters;
    if ( numFilters > 0 )
        HavokFilter Filter[numFilters]; 
} bhkNiTriStripsShape <name="bhkNiTriStripsShape">;


typedef struct {
    Ref shape;
    // Cinfo size 16
    uint userData;
    uint shapeCollection;
    uint code;
    float scale;  // End Cinfo
    uint dataSize;
    Vec4 offset;
    if ( stream > 34 )
        byte buildType;
    if ( dataSize > 0 )
        byte data[dataSize];
} bhkMoppBVShape <name="bhkMoppBvTreeShape">;

typedef struct {
    Ref target;
    // hkpCompressedMeshShapeCinfo
    uint userData;
    float radius;
    float unkFloat;
    Vec4 scaling;
    // end Cinfo
    float radius;
    Vec4 scaling;
    Ref data;
} bhkCMS <name="bhkCompressedMeshShape">;

typedef struct {
    uint material;
    HavokFilter filter;
} bhkBSMaterial;

typedef struct {
    Vec4 translation;
    QuatXYZW rotation;
} bhkCMSDTrans;

typedef struct {
    ushort triA;
    ushort triB;
    ushort triC;
    uint material;
    ushort weldingInfo;
} bhkCMSDBT;

typedef struct {
    Vec4 translation;
    uint matIndex; // m_materialInfo
    ushort reference;
    ushort transformIndex;
    uint numVerts;
    if ( numVerts > 0 )
        ushort verts[numVerts] <optimize=false>;
    uint numIndices;
    if ( numIndices > 0 )
        ushort indices[numIndices] <optimize=false>;
    uint numStrips;
    if ( numStrips > 0 )
        ushort strips[numStrips] <optimize=false>;
    uint numWeldingInfo;
    if ( numWeldingInfo > 0 )
        ushort weldingInfo[numWeldingInfo] <optimize=false>;
    
} bhkCMSDChunk;

typedef struct {
    uint bitsPerIndex;
    uint bitsPerWIndex;
    uint maskWIndex;
    uint maskIndex;
    float error;
    Vec4 AABBBoundMin;
    Vec4 AABBBoundMax;
    byte weldingType;
    byte materialType;
    // Mat32A, Mat16A, and Mat8A do not appear to ever be used
    uint numMat32;
    if ( numMat32 > 0 )
        uint mat32[numMat32] <optimize=true>;
    uint numMat16;
    if ( numMat16 > 0 )
        uint mat16[numMat16] <optimize=true>;
    uint numMat8;
    if ( numMat8 > 0 )
        uint mat8[numMat8] <optimize=true>;

    uint numMaterials;
    bhkBSMaterial materials[numMaterials] <optimize=false>;

    // NamedMat does not appear to ever be used
    uint numNamedMat;
    // Needs Array

    uint numTransforms;
    if ( numTransforms > 0 )
        bhkCMSDTrans transforms[numTransforms] <optimize=false>;

    uint numBigVerts;
    if ( numBigVerts > 0 )
        Vec4 bigVerts[numBigVerts] <optimize=false>;

    uint numBigTris;
    if ( numBigTris > 0 )
        bhkCMSDBT bigTris[numBigTris] <optimize=false>;

    uint numChunks;
    bhkCMSDChunk chunks[numChunks] <optimize=false>;

    // ConvexPiece does not appear to ever be used
    uint numConvexPieceA;
    // Needs Array

} bhkCMSD <name="bhkCompressedMeshShapeData">;


// CONSTRAINT DESCRIPTORS

typedef enum<byte> {
    MotorNone = 0,
    MotorPosition = 1,
    MotorVelocity = 2,
    MotorSpringDamper = 3
} MotorType;

typedef struct {
    if ( stream > 29 ) {
        MotorType motor;

        Assert( motor >= 0 && motor <= 3, "MotorType is an unexpected value" );

        if ( motor != MotorNone ) {
            // bhkLimitedForceConstraintMotor
            float minForce;
            float maxForce;
        }

        switch ( motor ) {
            case MotorPosition: // bhkPositionConstraintMotor
                float tau;
                float damping;
                float proportionalRecoveryVelocity;
                float constantRecoveryVelocity;
                break;
            case MotorVelocity: // bhkVelocityConstraintMotor
                float tau;
                float velocityTarget; // Speed target
                bool useVelocityTargetFromConstraintTargets;
                break;
            case MotorSpringDamper: // bhkSpringDamperConstraintMotor
                float springConstant;
                float springDamping;
                break;
            case MotorNone:
                break;
        }
        
        if ( motor != MotorNone )
            bool motorIsEnabled;
    }
} MotorDesc;

typedef struct {
    Vec4 axleA;
    Vec4 axleInA1;
    Vec4 axleInA2;
    Vec4 pivotA;
    Vec4 axleB;
    Vec4 axleInB1;
    if ( stream > 29 ) // ???
        Vec4 axleInB2;
    Vec4 pivotB;
} HingeDesc <open=true>;

typedef struct {
    HingeDesc hinge <open=true>;
    float minAngle;
    float maxAngle;
    float maxFriction;
    MotorDesc motor;
} LimitedHingeDesc <open=true>;

typedef struct {
    Vec4 twistA;
    Vec4 planeA;
    if ( stream > 29 ) // ???
        Vec4 motorA;
    Vec4 pivotA;
    Vec4 twistB;
    Vec4 planeB;
    if ( stream > 29 ) // ???
        Vec4 motorB;
    Vec4 pivotB;
    float coneMaxAngle;
    float planeMinAngle;
    float planeMaxAngle;
    float twistMinAngle;
    float twistMaxAngle;
    float maxFriction;
    MotorDesc motor;

} RagdollDesc <open=true>;

typedef struct {
    Vec4 pivotA;
    Vec4 pivotB;
    float length;
} StiffSpringDesc <open=true>;

typedef struct {
    Vec4 translationA;
    Vec4 translationB;
} BallAndSocketDesc <open=true>;

typedef struct {
    Vec4 slidingA;
    Vec4 rotationA;
    if ( stream > 29 )
    Vec4 planeA;
    Vec4 pivotA;
    Vec4 slidingB;
    Vec4 rotationB;
    if ( stream > 29 )
    Vec4 planeB;
    Vec4 pivotB;
    float minDistance;
    float maxDistance;
    float friction;
    MotorDesc motor;

} PrismaticDesc <open=true>;

typedef struct {
    struct ConstraintData constraintData;
    float threshold;
    bool removeWhenBroken;
} BreakableDesc <open=true>;

typedef struct {
    struct ConstraintData constraintData;
    float strength;
} MalleableDesc <open=true>;

typedef enum <uint> {
    BallAndSocket = 0,
    Hinge = 1,
    LimitedHinge = 2,
    //POINTTOPATH = 3,
    Prismatic = 6,
    Ragdoll = 7,
    StiffSpring = 8,
    //WHEEL     = 9,
    //GENERIC   = 10,
    //CONTACT   = 11,
    Breakable = 12,
    Malleable = 13,
    //POINTTOPLANE       = 14, 
    //PULLEY             = 15, 
    //ROTATIONAL         = 16, 
    //HINGE_LIMITS       = 18, 
    //RAGDOLL_LIMITS     = 19, 
    //CUSTOM             = 20, 
    //RACK_AND_PINION    = 21, 
    //COG_WHEEL          = 22, 
    //FIXED              = 23, 
    //DEFORMABLE_FIXED   = 24, 
    //LINEAR_SLACK       = 25, 
    //// Chain types
    //STIFF_SPRING_CHAIN = 100,
    //BALL_SOCKET_CHAIN  = 101,
    //POWERED_CHAIN      = 102
} hkConstraintType;

typedef struct {
    hkConstraintType type;
    RefArray entities( "Entity" );
    uint priority;
    
    switch ( type ) {
        case BallAndSocket:
            BallAndSocketDesc desc;
            break;
        case Hinge:
            HingeDesc desc;
            break;
        case LimitedHinge:
            LimitedHingeDesc desc;
            break;
        case Prismatic:
            PrismaticDesc desc;
            break;
        case Ragdoll:
            RagdollDesc desc;
            break;
        case StiffSpring:
            StiffSpringDesc desc;
            break;
        case Breakable:
            BreakableDesc desc;
            break;
        case Malleable:
            MalleableDesc desc;
            break;
    }

} ConstraintData <open=true>;

// CONSTRAINTS

typedef struct {
    RefArray entities( "Entity" );
    uint priority;
} bhkConstraint <open=true>; // Abstract

typedef struct {
    bhkConstraint base;
    HingeDesc desc;
} bhkHingeConstraint <name="bhkHingeConstraint">;

typedef struct {
    bhkConstraint base;
    LimitedHingeDesc desc;
} bhkLHConstraint <name="bhkLimitedHingeConstraint">;

typedef struct {
    bhkConstraint base;
    RagdollDesc desc;
} bhkRagConstraint <name="bhkRagdollConstraint">;

typedef struct {
    bhkConstraint base;
    BreakableDesc desc;
} bhkBreakConstraint <name="bhkBreakableConstraint">;

typedef struct {
    bhkConstraint base;
    StiffSpringDesc desc;
} bhkSSpringConstraint <name="bhkStiffSpringConstraint">;

typedef struct {
    bhkConstraint base;
    BallAndSocketDesc desc;
} bhkBASConstraint <name="bhkBallAndSocketConstraint">;

typedef struct {
    bhkConstraint base;
    PrismaticDesc desc;
} bhkPrismaticConstraint <name="bhkPrismaticConstraint">;

typedef struct {
    bhkConstraint base;
    MalleableDesc desc;
} bhkMalleableConstraint <name="bhkMalleableConstraint">;

typedef struct {
    uint numPivots;
    Assert( numPivots % 2 == 0, "numPivots is not even" );
    if ( numPivots > 0 ) {
        struct {
            Vec4 pivotInA;
            Vec4 pivotInB;
        } pivots[numPivots / 2];
    }
    // hkpBallSocketChainData
    float tau;
    float damping;
    float cfm; // Constraint mixing force
    float maxErrorDistance;
    // hkConstraintChainCinfo
    RefArray entitiesA( "Entity A" );
    // hkConstraintCinfo
    uint numEntities; // Hardcoded to 2, EntityA + EntityB
    Assert( numEntities == 2, "numEntities != 2" );
    Ref entityA;
    Ref entityB;
    uint priority;
} bhkBASConstraintChain <name="bhkBallSocketConstraintChain">;


typedef struct {
    STRING name;
    RefArray bones( "Bone" );
} bhkRagdollTemplate <name="bhkRagdollTemplate">;

typedef struct {
    STRING name;
    float mass;
    float restitution;
    float friction;
    float radius;
    uint material; // Havok Material
    uint numConstraints;
    if ( numConstraints > 0 )
        ConstraintData constraints[numConstraints] <optimize=false>;
} bhkRagdollTemplateData <name="bhkRagdollTemplateData">;

// SYSTEMS

typedef BinaryData bhkPhysSystem <name="bhkPhysicsSystem">;
typedef BinaryData bhkRagSystem <name="bhkRagdollSystem">;


// Legacy

typedef struct {
    bhkWorldObject obj;
    uint64 padding;
    Vec4 aabbMin;
    Vec4 aabbMax;
} bhkAabbPhantom <name="bhkAabbPhantom">;

typedef struct {
    RefArray shapes( "Shape" );
    uint material;
    float radius;
    uint unkInt1;
    float unkFloat1;
    hkWorldObjCinfoProperty childShapeProp;
    byte unkByte1;
    float unkFloat2;
} bhkConvexListShape <name="bhkConvexListShape">;

typedef struct {
    Ref body;
    // hkUnaryActionCinfo
    uint unkInt1;
    uint unkInt2;
    // hkOrientHingedBodyActionCinfo
    uint64 padding;
    Vec4 hingeAxisLS;
    Vec4 forwardLS;
    float strength;
    float damping;
    uint64 padding;
} bhkOrientHingedBodyAction <name="bhkOrientHingedBodyAction">;

typedef struct {
    uint userData;
    // hkActionCinfo
    uint unkInt2;
    // hkUnaryActionCinfo
    uint unkInt1;
    float initialStickForce;
    float stickStrength;
    float neighborDistance;
    float neighborStrength;
} bhkLiquidAction <name="bhkLiquidAction">;

typedef struct {
    HavokFilter filter;
    uint numVerts;
    uint material;
} hkSubPartData;

typedef struct {
    Triangle tri;
    ushort weldingInfo;
    if ( stream <= 11 )
        Vec3 normal;
} hkTriangleData;

typedef struct {
    if ( stream <= 11 ) {
        ushort partCount;
        if ( partCount > 0 )
            hkSubPartData data[partCount] <optimize=true>;
    }
    uint userData;
    uint unused1; // Pointer/garbage
    float radius;
    uint unused2; // Pointer/garbage
    Vec4 scaling;
    float radius;
    Vec4 scaling;
    Ref data;
} bhkPackedNiTriStripsShape <name="bhkPackedNiTriStripsShape">;

typedef struct {
    uint keyCount;
    if ( keyCount > 0 )
        hkTriangleData triData[keyCount];

    uint numVerts;

    if ( stream > 11 )
        byte unkByte;

    if ( numVerts > 0 )
        Vec3 compressedVertData[numVerts];

    if ( stream > 11 ) {
        ushort partCount;
        if ( partCount > 0 )
            hkSubPartData data[partCount] <optimize=true>;
    }
} hkPackedNiTriStripsData <name="hkPackedNiTriStripsData">;

// Deathposes.psa files, FO3/NV
typedef struct {
    uint numBones;
    if ( numBones > 0 )
        STRING bones[numBones];
    uint numPoses;
    if ( numPoses > 0 )
        struct {
            uint numMatrices;
            if ( numMatrices > 0 )
                struct {
                    Vec3 translation;
                    QuatXYZW rotation;
                    Vec3 scale;
                } matrix[numMatrices];
        } poseArray[numPoses] <optimize=false>;
} bhkPoseArray <name="bhkPoseArray">;
