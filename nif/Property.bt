//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: Property.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef NiObjectNET NiProperty <name="NiProperty">;
typedef NiObjectNET NiTexture <name="NiTexture">;

typedef struct {
    NiProperty prop;
    AlphaFlags flags;
    ubyte threshold;
    if ( version == Version(20, 3, 1, 1) )
        ushort unk;
    if ( version <= V2_3 ) {
        ushort unkShort;
        uint unkInt;
    }
} NiAlphaProperty <name="NiAlphaProperty">;

typedef struct {
    NiProperty prop;
    enum <ushort> {
        DITHER_FALSE,
        DITHER_TRUE
    } flags;
} NiDitherProperty <name="NiDitherProperty">;

typedef struct {
    NiProperty prop;
    FogFlags flags;
    float depth;
    Color3 color;
} NiFogProperty <name="NiFogProperty">;

typedef struct {
    NiProperty prop;
    LEGACY_FLAGS // ushort flags;
    if ( stream < 26 ) {
        Color3 ambient;
        Color3 diffuse;
    }
    Color3 specular;
    Color3 emissive;
    float glossiness;
    float alpha;
    if ( stream > 21 )
        float emissiveMult;
} NiMaterialProperty <name="NiMaterialProperty">;

typedef struct {
    NiProperty prop;
    enum <ushort> {
        SMOOTH_FALSE,
        SMOOTH_TRUE
    } flags;
} NiShadeProperty <name="NiShadeProperty">;

typedef struct {
    NiProperty prop;
    enum <ushort> {
        SPECULAR_FALSE,
        SPECULAR_TRUE
    } flags;
} NiSpecularProperty <name="NiSpecularProperty">;

typedef struct {
    NiProperty prop;
    LEGACY_FLAGS // ushort flags;
    if ( version < Version(20, 1, 0, 2) ) {
        bool enable;
        TestFunction testFunction ENUM16_PAD32;
        uint ref;
        uint mask;
        StencilAction stencilFailAction ENUM16_PAD32;
        StencilAction stencilPassZFailAction ENUM16_PAD32;
        StencilAction stencilPassAction ENUM16_PAD32;
        StencilDrawMode drawMode ENUM16_PAD32;
    } else {
        StencilFlags flags;
        uint ref;
        uint mask;
    }
} NiStencilProperty <name="NiStencilProperty">;

typedef struct {
    NiProperty prop;
    VertexColorFlags flags;
    if ( version < Version(20, 1, 0, 2) ) {
        SourceVertexMode sourceVertexMode ENUM16_PAD32;
        LightingMode lightingMode ENUM16_PAD32;
    }
} NiVertexColorProperty <name="NiVertexColorProperty">;

typedef struct {
    NiProperty prop;
    enum <ushort> {
        WIREFRAME_FALSE,
        WIREFRAME_TRUE
    } flags;
} NiWireframeProperty <name="NiWireframeProperty">;

typedef struct {
    NiProperty prop;
    ZBufferFlags flags;
    if ( version >= Version(4, 1, 0, 12) && version < Version(20, 1, 0, 2) ) {
        // UNVERIFIED MIN
        TestFunction testFunction ENUM16_PAD32;
    }
} NiZBufferProperty <name="NiZBufferProperty">;

typedef struct {
    NiTexture tex;
    bool useExternal;
    STRING filename;
    Ref data; // NiPixelData if < 20.2.0.4 or !persistentRenderData
              // else NiPersistentSrcTextureRendererData

    PixelLayout pixelLayout;
    MipMapFormat mipMapFormat;
    AlphaFormat alphaFormat;
    bool isStatic;
    if ( version >= Version(10, 1, 0, 103) )
        bool directRender;
    if ( version >= Version(20, 2, 0, 4) )
        bool persistentRenderData;
} NiSourceTexture <name="NiSourceTexture">;

typedef NiSourceTexture NiSourceCubeMap <name="NiSourceCubeMap">;

typedef struct {
    TexCoord translation;
    TexCoord scale;
    float rotation;
    enum TransformMethod {
        MAYA_DEPRECATED_TRANSFORM = 0,
        MAX_TRANSFORM,
        MAYA_TRANSFORM
    } transformMethod;
    TexCoord center;
} TexTransform;

typedef struct {
    Ref source;
    if ( version < Version(20, 1, 0, 2) ) {
        ClampMode clampMode ENUM16_PAD32;
        FilterMode filterMode ENUM16_PAD32;
        uint texCoordIndex;
        if ( version < Version(10, 3, 0, 4) || WORLDSHIFT_10_4 )
            short LandK[2];
    } else {
        MapFlags flags;
    }

    if ( version >= Version(20, 5, 0, 4) )
        ushort maxAnisotropy;
    
    if ( version >= Version(10, 1, 0, 0) ) {
        bool hasTexTransform;
        if ( hasTexTransform )
            TexTransform transform;
    }

    if ( version <= Version(4, 1, 0, 12) ) // UNVERIFIED MAX
        ushort unk;
} Map;

typedef struct {
    bool isUsed;
    if ( isUsed ) {
        Map data;
        uint mapIndex;
    }
} ShaderMap;

typedef struct {
    NiProperty prop;
    if ( version < Version(20, 1, 0, 2) ) {
        if ( version <= Version(10, 0, 1, 2) )
            ushort flags;
        ApplyMode applyMode ENUM16_PAD32;
    } else {
        TexturingFlags flags;
    }

    uint textureCount;
    local uint numTex = textureCount;
    bool hasBaseTex;
    if ( hasBaseTex )
        Map baseTex;
    bool hasDarkTex;
    if ( hasDarkTex )
        Map darkTex;
    bool hasDetailTex;
    if ( hasDetailTex )
        Map detailTex;
    bool hasGlossTex;
    if ( hasGlossTex )
        Map glossTex;
    bool hasGlowTex;
    if ( hasGlowTex )
        Map glowTex;
    bool hasBumpTex;
    if ( hasBumpTex ) {
        Map bumpTex;
        float lumaScale;
        float lumaOffset;
        Vec4 bumpMatrix;
    }

    if ( numTex > 6 ) {
        bool hasNormalTex;
        if ( hasNormalTex )
            Map normalTex;
    }

    if ( numTex > 7 && version >= Version(20, 2, 0, 5) ) {
        bool hasParallaxTex;
        if ( hasParallaxTex ) {
            Map parallaxTex;
            float parallaxOffset;
        }
    } else {
        numTex++;
    }

    if ( numTex > 8 ) {
        bool hasDecalTex0;
        if ( hasDecalTex0 )
            Map decalTex0;
    }
    
    if ( numTex > 9 ) {
        bool hasDecalTex1;
        if ( hasDecalTex1 )
            Map decalTex1;
    }
    if ( numTex > 10 ) {
        bool hasDecalTex2;
        if ( hasDecalTex2 )
            Map decalTex2;
    }
    if ( numTex > 11 ) {
        bool hasDecalTex3;
        if ( hasDecalTex3 )
            Map decalTex3;
    }
    
    if ( version >= Version(10, 0, 1, 0) ) {
        uint numShaderTex;
        if ( numShaderTex > 0 ) {
            ShaderMap shaderTex[numShaderTex] <optimize=false>;
        }
    }
} NiTexturingProperty <name="NiTexturingProperty">;
