//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: Enums.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Vertex Data flags
typedef enum <ushort> { 
    VF_VERTEX = 0x1, VF_UV = 0x2, VF_UV_2 = 0x4, VF_NORMAL = 0x8, 
    VF_TANGENT = 0x10, VF_COLORS = 0x20, VF_SKINNED = 0x40, VF_LANDDATA = 0x80,
    VF_EYEDATA = 0x100, VF_FULLPREC = 0x400
} VertexAttribute;


// NiAVObject Flags
//  These bits appear to have the same function across all supported NIFs (34, 83, 100, 130),
//  though these values were obtained from version 130.
//  For Oblivion these values may differ.
//  For Morrowind the flags are completely different.
typedef union {
    int value;
    struct {
        int hidden                  : 1;
        int selectiveUpdate         : 1; // Always set at runtime
        int selectiveUpdateTrans    : 1; // Always set at runtime
        int selectiveUpdateCtlr     : 1; // Always set at runtime
        int selectiveUpdateRigid    : 1; // Always unset at runtime
        int displayObject           : 1;
        int disableSorting          : 1;
        int selUpdTransOverride     : 1;
        int UNUSED                  : 1;
        int saveExternalGeomData    : 1;
        int noDecals                : 1;
        int alwaysDraw              : 1;
        int meshLOD                 : 1; // Always unset at runtime when stream < 83
        int fixedBound              : 1;
        int topFadeNode             : 1;
        int ignoreFade              : 1;
        int noAnimSyncX             : 1;
        int noAnimSyncY             : 1;
        int noAnimSyncZ             : 1;
        int noAnimSyncS             : 1;
        int noDismember             : 1;
        int noDismemberValid        : 1;
        int renderUse               : 1;
        int materialsApplied        : 1;
        int _unused                 : 8 <hidden=true>;
        // Only the first 24 bits are read from the file
        // Note: This may only apply to FO4, as some NIFs have the last 8 bits set
        if ( _unused > 0 )
            Printf( "Last 8 NiAVObject flag bits set at offset %u\r\n", FTell() );
    } bitflags;
} NiAVObjectFlags <name="Flags", read=NiAVFlagsRead, open=true>;

string NiAVFlagsRead( NiAVObjectFlags& f )
{
    string s;
    
    if ( f.value & 0x1 )
        s += "hidden | ";
    if ( f.value & 0x2 )
        s += "selectiveUpdate | ";
    if ( f.value & 0x4 )
        s += "selectiveUpdateTrans | ";
    if ( f.value & 0x8 )
        s += "selectiveUpdateCtlr | ";
    if ( f.value & 0x10 )
        s += "selectiveUpdateRigid | ";
    if ( f.value & 0x20 )
        s += "displayObject | ";
    if ( f.value & 0x40 )
        s += "disableSorting | ";
    if ( f.value & 0x80 )
        s += "selUpdTransOverride | ";
    if ( f.value & 0x100 )
        s += "UNUSED | ";
    if ( f.value & 0x200 )
        s += "saveExternalGeomData | ";
    if ( f.value & 0x400 )
        s += "noDecals | ";
    if ( f.value & 0x800 )
        s += "alwaysDraw | ";
    if ( f.value & 0x1000 )
        s += "isMeshLOD | ";
    if ( f.value & 0x2000 )
        s += "fixedBound | ";
    if ( f.value & 0x4000 )
        s += "topFadeNode | ";
    if ( f.value & 0x8000 )
        s += "ignoreFade | ";
    if ( f.value & 0x10000 )
        s += "noAnimSyncX | ";
    if ( f.value & 0x20000 )
        s += "noAnimSyncY | ";
    if ( f.value & 0x40000 )
        s += "noAnimSyncZ | ";
    if ( f.value & 0x80000 )
        s += "noAnimSyncS | ";
    if ( f.value & 0x100000 )
        s += "noDismember | ";
    if ( f.value & 0x200000 )
        s += "noDismemberValid | ";
    if ( f.value & 0x400000 )
        s += "renderUse | ";
    if ( f.value & 0x800000 )
        s += "materialsApplied | ";

    SPrintf(s, "%s (%u)", s, f.value );
    
    return s;
}

// NiSwitchNode Flags
typedef union {
    ushort value;
    struct {
        ushort UpdateOnlyActiveChild : 1;
        ushort UpdateControllers     : 1;
        ushort                       : 14;
    } bitflags;
} NiSwitchFlags <name="Flags", read=NiSwitchFlagsRead, open=true>;

string NiSwitchFlagsRead( NiSwitchFlags& f )
{
    string s;
    if ( f.value & 0x1 )
        s += "UpdateOnlyActiveChild | ";
    if ( f.value & 0x2 )
        s += "UpdateControllers | ";

    SPrintf(s, "%s (%u)", s, f.value );
    return s;
}

// BSValueNode Flags
typedef union {
    byte value;
    struct {
        byte BillboardWorldZ : 1;
        byte UsePlayerAdjust : 1;
        byte                 : 6;
    } bitflags;
} BSValueNodeFlags <name="Flags", read=BSValueNodeFlagsRead, open=true>;

string BSValueNodeFlagsRead( BSValueNodeFlags& f )
{
    string s;
    if ( f.value & 0x1 )
        s += "BillboardWorldZ | ";
    if ( f.value & 0x2 )
        s += "UsePlayerAdjust | ";

    SPrintf(s, "%s (%u)", s, f.value );
    return s;
}

// General

typedef enum <ushort> {
    ALWAYS_FACE_CAMERA, ROTATE_ABOUT_UP, RIGID_FACE_CAMERA, ALWAYS_FACE_CENTER,
    RIGID_FACE_CENTER, BSROTATE_ABOUT_UP, ROTATE_ABOUT_UP2 = 9
} BillboardMode <name="Billboard Mode">;

typedef enum <uint> {
    BSCP_CULL_NORMAL = 0x0,
    BSCP_CULL_ALLPASS = 0x1,
    BSCP_CULL_ALLFAIL = 0x2,
    BSCP_CULL_IGNOREMULTIBOUNDS = 0x3,
    BSCP_CULL_FORCEMULTIBOUNDSNOUPDATE = 0x4
} BSCPCullingType <name="Culling Mode">;

// Shaders

typedef enum <uint> {
    DEFAULT,
    ENVMAP,
    GLOWMAP,
    PARALLAX,
    FACE,
    SKIN_TINT,
    HAIR_TINT,
    PARALLAX_OCC,
    MULTI_TEXTURE_LANDSCAPE,
    LOD_LANDSCAPE,
    SNOW,
    MULTI_LAYER_PARALLAX,
    TREE_ANIM,
    LOD_OBJECTS,
    MULTI_INDEX_TRISHAPE_SNOW,
    LOD_OBJECTS_HD,
    EYE,
    CLOUD,
    LOD_LANDSCAPE_NOISE,
    MULTI_TEXTURE_LANDSCAPE_LOD_BLEND,
    DISMEMBERMENT
} ShaderType <name="Shader Type">;

// Collision

typedef enum <byte> {
    OL_UNIDENTIFIED,
    OL_STATIC,    
    OL_ANIM_STATIC,    
    OL_TRANSPARENT,
    OL_CLUTTER,
    OL_WEAPON,
    OL_PROJECTILE,
    OL_SPELL,
    OL_BIPED,
    OL_TREES,
    OL_PROPS,
    OL_WATER,
    OL_TRIGGER,
    OL_TERRAIN,
    OL_TRAP,
    OL_NONCOLLIDABLE,
    OL_CLOUD_TRAP,
    OL_GROUND,
    OL_PORTAL,
    OL_STAIRS,
    OL_CHAR_CONTROLLER,
    OL_AVOID_BOX,
    OL_UNKNOWN1,
    OL_UNKNOWN2,
    OL_CAMERA_PICK,
    OL_ITEM_PICK,
    OL_LINE_OF_SIGHT,
    OL_PATH_PICK,
    OL_CUSTOM_PICK_1,
    OL_CUSTOM_PICK_2,
    OL_SPELL_EXPLOSION,
    OL_DROPPING_PICK,
    OL_OTHER,
    OL_HEAD,
    OL_BODY,
    OL_SPINE1,
    OL_SPINE2,
    OL_L_UPPER_ARM,
    OL_L_FOREARM,
    OL_L_HAND,
    OL_L_THIGH,
    OL_L_CALF,
    OL_L_FOOT,
    OL_R_UPPER_ARM,
    OL_R_FOREARM,
    OL_R_HAND,
    OL_R_THIGH,
    OL_R_CALF,
    OL_R_FOOT,
    OL_TAIL,
    OL_SIDE_WEAPON,
    OL_SHIELD,
    OL_QUIVER,
    OL_BACK_WEAPON,
    OL_BACK_WEAPON2,
    OL_PONYTAIL,
    OL_WING,
    OL_NULL,
} OblivionLayer <name="Collision Layer">;

typedef enum <byte> {
    FO3_UNIDENTIFIED,
    FO3_STATIC,
    FO3_ANIM_STATIC,
    FO3_TRANSPARENT,
    FO3_CLUTTER,
    FO3_WEAPON,
    FO3_PROJECTILE,
    FO3_SPELL,
    FO3_BIPED,
    FO3_TREES,
    FO3_PROPS,
    FO3_WATER,
    FO3_TRIGGER,
    FO3_TERRAIN,
    FO3_TRAP,
    FO3_NONCOLLIDABLE,
    FO3_CLOUD_TRAP,
    FO3_GROUND,
    FO3_PORTAL,
    FO3_DEBRIS_SMALL,
    FO3_DEBRIS_LARGE,
    FO3_ACOUSTIC_SPACE,
    FO3_ACTORZONE,
    FO3_PROJECTILEZONE,
    FO3_GASTRAP,
    FO3_SHELLCASING,
    FO3_TRANSPARENT_SMALL,
    FO3_INVISIBLE_WALL,
    FO3_TRANSPARENT_SMALL_ANIM,
    FO3_BIPED2,
    FO3_CHARCONTROLLER,
    FO3_AVOIDBOX,
    FO3_COLLISIONBOX,
    FO3_CAMERASPHERE,
    FO3_DOORDETECTION,
    FO3_CAMERAPICK,
    FO3_ITEMPICK,
    FO3_LINEOFSIGHT,
    FO3_PATHPICK,
    FO3_CUSTOMPICK1,
    FO3_CUSTOMPICK2,
    FO3_SPELLEXPLOSION,
    FO3_DROPPINGPICK,
    FO3_NULL,
    FO3_OTHER,
    FO3_HEAD,
    FO3_BODY,
    FO3_SPINE1,
    FO3_SPINE2,
    FO3_L_UPPER_ARM,
    FO3_L_FORE_ARM,
    FO3_L_HAND,
    FO3_L_THIGH,
    FO3_L_CALF,
    FO3_L_FOOT,
    FO3_R_UPPER_ARM,
    FO3_R_FORE_ARM,
    FO3_R_HAND,
    FO3_R_THIGH,
    FO3_R_CALF,
    FO3_R_FOOT,
    FO3_TAIL,
    FO3_SHIELD,
    FO3_QUIVER,
    FO3_WEAPON2,
    FO3_PONYTAIL,
    FO3_WING,
    FO3_PACK,
    FO3_CHAIN,
    FO3_ADDONHEAD,
    FO3_ADDONCHEST,
    FO3_ADDONARM,
    FO3_ADDONLEG
} FO3Layer <name="Collision Layer">;

typedef enum <byte> {
    SK_UNIDENTIFIED,
    SK_STATIC,
    SK_ANIMSTATIC,
    SK_TRANSPARENT,
    SK_CLUTTER,
    SK_WEAPON,
    SK_PROJECTILE,
    SK_SPELL,
    SK_BIPED,
    SK_TREES,
    SK_PROPS,
    SK_WATER,
    SK_TRIGGER,
    SK_TERRAIN,
    SK_TRAP,
    SK_NONCOLLIDABLE,
    SK_CLOUD_TRAP,
    SK_GROUND,
    SK_PORTAL,
    SK_DEBRIS_SMALL,
    SK_DEBRIS_LARGE,
    SK_ACOUSTIC_SPACE,
    SK_ACTORZONE,
    SK_PROJECTILEZONE,
    SK_GASTRAP,
    SK_SHELLCASING,
    SK_TRANSPARENT_SMALL,
    SK_INVISIBLE_WALL,
    SK_TRANSPARENT_SMALL_ANIM,
    SK_WARD,
    SK_CHARCONTROLLER,
    SK_STAIRHELPER,
    SK_DEADBIP,
    SK_BIPED_NO_CC,
    SK_AVOIDBOX,
    SK_COLLISIONBOX,
    SK_CAMERASHPERE,
    SK_DOORDETECTION,
    SK_CONEPROJECTILE,
    SK_CAMERAPICK,
    SK_ITEMPICK,
    SK_LINEOFSIGHT,
    SK_PATHPICK,
    SK_CUSTOMPICK1,
    SK_CUSTOMPICK2,
    SK_SPELLEXPLOSION,
    SK_DROPPINGPICK,
    SK_NULL
} SkyrimLayer <name="Collision Layer">;

typedef enum <byte>
{
    P_OTHER = 0x0,
    P_HEAD = 0x1,
    P_BODY = 0x2,
    P_SPINE1 = 0x3,
    P_SPINE2 = 0x4,
    P_LUPPERARM = 0x5,
    P_LFOREARM = 0x6,
    P_LHAND = 0x7,
    P_LTHIGH = 0x8,
    P_LCALF = 0x9,
    P_LFOOT = 0xA,
    P_RUPPERARM = 0xB,
    P_RFOREARM = 0xC,
    P_RHAND = 0xD,
    P_RTHIGH = 0xE,
    P_RCALF = 0xF,
    P_RFOOT = 0x10,
    P_TAIL = 0x11,
    P_SHIELD = 0x12,
    P_QUIVER = 0x13,
    P_WEAPON = 0x14,
    P_PONYTAIL = 0x15,
    P_WING = 0x16,
    P_PACK = 0x17,
    P_CHAIN = 0x18,
    P_ADDONHEAD = 0x19,
    P_ADDONCHEST = 0x1A,
    P_ADDONLEG = 0x1B,
    P_ADDONARM = 0x1C
} BipedPart <name="Biped Part">;

typedef enum <byte>
{
    BROAD_PHASE_INVALID = 0x0,
    BROAD_PHASE_ENTITY = 0x1,
    BROAD_PHASE_PHANTOM = 0x2,
    BROAD_PHASE_BORDER = 0x3,
    BROAD_PHASE_MAX_ID = 0x4,
} BroadPhaseType <name="Broad Phase Type">;

typedef enum <byte> {
    MOTION_INVALID = 0x0,
    MOTION_DYNAMIC = 0x1,
    MOTION_SPHERE_INERTIA = 0x2,
    MOTION_BOX_INERTIA = 0x3,
    MOTION_KEYFRAMED = 0x4,
    MOTION_FIXED = 0x5,
    MOTION_THIN_BOX_INERTIA = 0x6,
    MOTION_CHARACTER = 0x7,
    MOTION_MAX_ID = 0x8,
} MotionType <name="Motion Type">;

typedef enum <byte> {
    SOLVER_DEACTIVATION_INVALID = 0x0,
    SOLVER_DEACTIVATION_OFF = 0x1,
    SOLVER_DEACTIVATION_LOW = 0x2,
    SOLVER_DEACTIVATION_MEDIUM = 0x3,
    SOLVER_DEACTIVATION_HIGH = 0x4,
    SOLVER_DEACTIVATION_MAX = 0x5,
} SolverDeactivation <name="Solver Deactivation">;

typedef enum <byte> {
    INVALID,
    SIMPLE_CONTACT,
    REPORTING,
    NONE    
} hkResponseType <name="Response Type">;

/*
enum hkpConstraintData::ConstraintType
{
  CONSTRAINT_TYPE_BALLANDSOCKET = 0x0,
  CONSTRAINT_TYPE_HINGE = 0x1,
  CONSTRAINT_TYPE_LIMITEDHINGE = 0x2,
  CONSTRAINT_TYPE_POINTTOPATH = 0x3,
  CONSTRAINT_TYPE_PRISMATIC = 0x6,
  CONSTRAINT_TYPE_RAGDOLL = 0x7,
  CONSTRAINT_TYPE_STIFFSPRING = 0x8,
  CONSTRAINT_TYPE_WHEEL = 0x9,
  CONSTRAINT_TYPE_GENERIC = 0xA,
  CONSTRAINT_TYPE_CONTACT = 0xB,
  CONSTRAINT_TYPE_BREAKABLE = 0xC,
  CONSTRAINT_TYPE_MALLEABLE = 0xD,
  CONSTRAINT_TYPE_POINTTOPLANE = 0xE,
  CONSTRAINT_TYPE_PULLEY = 0xF,
  CONSTRAINT_TYPE_ROTATIONAL = 0x10,
  CONSTRAINT_TYPE_HINGE_LIMITS = 0x12,
  CONSTRAINT_TYPE_RAGDOLL_LIMITS = 0x13,
  CONSTRAINT_TYPE_CUSTOM = 0x14,
  CONSTRAINT_TYPE_RACK_AND_PINION = 0x15,
  CONSTRAINT_TYPE_COG_WHEEL = 0x16,
  CONSTRAINT_TYPE_FIXED = 0x17,
  CONSTRAINT_TYPE_DEFORMABLE_FIXED = 0x18,
  CONSTRAINT_TYPE_LINEAR_SLACK = 0x19,
  BEGIN_CONSTRAINT_CHAIN_TYPES = 0x64,
  CONSTRAINT_TYPE_STIFF_SPRING_CHAIN = 0x64,
  CONSTRAINT_TYPE_BALL_SOCKET_CHAIN = 0x65,
  CONSTRAINT_TYPE_POWERED_CHAIN = 0x66,
};

enum hkpCollidableQualityType
{
  HK_COLLIDABLE_QUALITY_INVALID = 0xFFFFFFFF,
  HK_COLLIDABLE_QUALITY_FIXED = 0x0,
  HK_COLLIDABLE_QUALITY_KEYFRAMED = 0x1,
  HK_COLLIDABLE_QUALITY_DEBRIS = 0x2,
  HK_COLLIDABLE_QUALITY_DEBRIS_SIMPLE_TOI = 0x3,
  HK_COLLIDABLE_QUALITY_MOVING = 0x4,
  HK_COLLIDABLE_QUALITY_CRITICAL = 0x5,
  HK_COLLIDABLE_QUALITY_BULLET = 0x6,
  HK_COLLIDABLE_QUALITY_USER = 0x7,
  HK_COLLIDABLE_QUALITY_CHARACTER = 0x8,
  HK_COLLIDABLE_QUALITY_KEYFRAMED_REPORTING = 0x9,
  HK_COLLIDABLE_QUALITY_MAX = 0xA,
};

typedef enum 
{
  SPHERE = 0x0,
  CYLINDER = 0x1,
  TRIANGLE = 0x2,
  BOX = 0x3,
  CAPSULE = 0x4,
  CONVEX_VERTICES = 0x5,
  TRI_SAMPLED_HEIGHT_FIELD_COLLECTION = 0x6,
  TRI_SAMPLED_HEIGHT_FIELD_BV_TREE = 0x7,
  LIST = 0x8,
  MOPP = 0x9,
  CONVEX_TRANSLATE = 0xA,
  CONVEX_TRANSFORM = 0xB,
  SAMPLED_HEIGHT_FIELD = 0xC,
  EXTENDED_MESH = 0xD,
  TRANSFORM = 0xE,
  COMPRESSED_MESH = 0xF,
  STATIC_COMPOUND = 0x10,
  BV_COMPRESSED_MESH = 0x11,
  COLLECTION = 0x12,
  USER0 = 0x13,
  USER1 = 0x14,
  USER2 = 0x15,
  BV_TREE = 0x16,
  CONVEX = 0x17,
  CONVEX_PIECE = 0x18,
  MULTI_SPHERE = 0x19,
  CONVEX_LIST = 0x1A,
  TRIANGLE_COLLECTION = 0x1B,
  HEIGHT_FIELD = 0x1C,
  SPHERE_REP = 0x1D,
  BV = 0x1E,
  PLANE = 0x1F,
  PHANTOM_CALLBACK = 0x20,
  MULTI_RAY = 0x21,
  INVALID = 0x22,
  FIRST_SHAPE_TYPE = 0x0,
  MAX_SPU_SHAPE_TYPE = 0x16,
  MAX_PPU_SHAPE_TYPE = 0x23,
  ALL_SHAPE_TYPES = 0xFFFFFFFF,
} hkcdShapeType;*/

// Animation

typedef enum <uint> {
    LINEAR_KEY = 1,
    QUADRATIC_KEY,
    TBC_KEY,
    XYZ_ROTATION_KEY,
    CONST_KEY
} KeyType <name="Key Type">;

typedef enum <uint> {
    LSP_RefractionStrength = 0,
    LSP_EnvironmentMapScale = 8,
    LSP_Glossiness,
    LSP_SpecularStrength,
    LSP_EmissiveMultiple,
    LSP_Alpha,
    LSP_UOffset = 20,
    LSP_UScale,
    LSP_VOffset,
    LSP_VScale
} BSLSPControlledVariable <name="Controlled Variable">;

typedef enum <uint> {
    LSP_SpecularColor = 0,
    LSP_EmissiveColor
} BSLSPControlledColor <name="Controlled Color">;

typedef enum <uint> {
    ESP_EmissiveMultiple = 0,
    ESP_FalloffStartAngle,
    ESP_FalloffStopAngle,
    ESP_FalloffStartOpacity,
    ESP_FalloffStopOpacity,
    ESP_AlphaTransparency,
    ESP_UOffset,
    ESP_UScale,
    ESP_VOffset,
    ESP_VScale
} BSESPControlledVariable <name="Controlled Variable">;

typedef enum <uint> {
    ESP_EmissiveColor = 0
} BSESPControlledColor <name="Controlled Color">;


// Legacy Enums

// NiProperty

typedef enum <uint> {
    PIX_LAY_PALETTISED,
    PIX_LAY_HIGH_COLOR_16,
    PIX_LAY_TRUE_COLOR_32,
    PIX_LAY_COMPRESSED,
    PIX_LAY_BUMPMAP,
    PIX_LAY_PALETTISED_4,
    PIX_LAY_DEFAULT
} PixelLayout <name="Pixel Layout">;

typedef enum <uint> {
    MIP_FMT_NO,
    MIP_FMT_YES,
    MIP_FMT_DEFAULT
} MipMapFormat <name="Mipmap Format">;

typedef enum <uint> {
    ALPHA_NONE,
    ALPHA_BINARY,
    ALPHA_SMOOTH,
    ALPHA_DEFAULT
} AlphaFormat <name="Alpha Format">;

typedef enum <uint> {
    PX_FMT_RGB8,
    PX_FMT_RGBA8,
    PX_FMT_PAL8,
    PX_FMT_DXT1,
    PX_FMT_DXT5,
    PX_FMT_DXT5_ALT
} PixelFormat <name="Pixel Format">;
