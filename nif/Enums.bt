//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: Enums.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Vertex Data flags
typedef enum <ushort> { 
    VF_VERTEX  = 0x1,
    VF_UV      = 0x2,
    VF_UV_2    = 0x4,
    VF_NORMAL  = 0x8, 
    VF_TANGENT = 0x10,
    VF_COLORS  = 0x20,
    VF_SKINNED = 0x40,
    VF_LANDDATA = 0x80,
    VF_EYEDATA  = 0x100,
    VF_FULLPREC = 0x400
} VertexAttribute;

// General

typedef enum <ushort> {
    ALWAYS_FACE_CAMERA, ROTATE_ABOUT_UP, RIGID_FACE_CAMERA, ALWAYS_FACE_CENTER,
    RIGID_FACE_CENTER, BSROTATE_ABOUT_UP, ROTATE_ABOUT_UP2 = 9
} BillboardMode <name="Billboard Mode">;

typedef enum <uint> {
    BSCP_CULL_NORMAL = 0x0,
    BSCP_CULL_ALLPASS = 0x1,
    BSCP_CULL_ALLFAIL = 0x2,
    BSCP_CULL_IGNOREMULTIBOUNDS = 0x3,
    BSCP_CULL_FORCEMULTIBOUNDSNOUPDATE = 0x4
} BSCPCullingType <name="Culling Mode">;

// Shaders

typedef enum <uint> {
    DEFAULT,
    ENVMAP,
    GLOWMAP,
    PARALLAX,
    FACE,
    SKIN_TINT,
    HAIR_TINT,
    PARALLAX_OCC,
    MULTI_TEXTURE_LANDSCAPE,
    LOD_LANDSCAPE,
    SNOW,
    MULTI_LAYER_PARALLAX,
    TREE_ANIM,
    LOD_OBJECTS,
    MULTI_INDEX_TRISHAPE_SNOW,
    LOD_OBJECTS_HD,
    EYE,
    CLOUD,
    LOD_LANDSCAPE_NOISE,
    MULTI_TEXTURE_LANDSCAPE_LOD_BLEND,
    DISMEMBERMENT
} ShaderType <name="Shader Type">;

// Collision

typedef enum <byte> {
    OL_UNIDENTIFIED,
    OL_STATIC,    
    OL_ANIM_STATIC,    
    OL_TRANSPARENT,
    OL_CLUTTER,
    OL_WEAPON,
    OL_PROJECTILE,
    OL_SPELL,
    OL_BIPED,
    OL_TREES,
    OL_PROPS,
    OL_WATER,
    OL_TRIGGER,
    OL_TERRAIN,
    OL_TRAP,
    OL_NONCOLLIDABLE,
    OL_CLOUD_TRAP,
    OL_GROUND,
    OL_PORTAL,
    OL_STAIRS,
    OL_CHAR_CONTROLLER,
    OL_AVOID_BOX,
    OL_UNKNOWN1,
    OL_UNKNOWN2,
    OL_CAMERA_PICK,
    OL_ITEM_PICK,
    OL_LINE_OF_SIGHT,
    OL_PATH_PICK,
    OL_CUSTOM_PICK_1,
    OL_CUSTOM_PICK_2,
    OL_SPELL_EXPLOSION,
    OL_DROPPING_PICK,
    OL_OTHER,
    OL_HEAD,
    OL_BODY,
    OL_SPINE1,
    OL_SPINE2,
    OL_L_UPPER_ARM,
    OL_L_FOREARM,
    OL_L_HAND,
    OL_L_THIGH,
    OL_L_CALF,
    OL_L_FOOT,
    OL_R_UPPER_ARM,
    OL_R_FOREARM,
    OL_R_HAND,
    OL_R_THIGH,
    OL_R_CALF,
    OL_R_FOOT,
    OL_TAIL,
    OL_SIDE_WEAPON,
    OL_SHIELD,
    OL_QUIVER,
    OL_BACK_WEAPON,
    OL_BACK_WEAPON2,
    OL_PONYTAIL,
    OL_WING,
    OL_NULL,
} OblivionLayer <name="Collision Layer">;

typedef enum <byte> {
    FO3_UNIDENTIFIED,
    FO3_STATIC,
    FO3_ANIM_STATIC,
    FO3_TRANSPARENT,
    FO3_CLUTTER,
    FO3_WEAPON,
    FO3_PROJECTILE,
    FO3_SPELL,
    FO3_BIPED,
    FO3_TREES,
    FO3_PROPS,
    FO3_WATER,
    FO3_TRIGGER,
    FO3_TERRAIN,
    FO3_TRAP,
    FO3_NONCOLLIDABLE,
    FO3_CLOUD_TRAP,
    FO3_GROUND,
    FO3_PORTAL,
    FO3_DEBRIS_SMALL,
    FO3_DEBRIS_LARGE,
    FO3_ACOUSTIC_SPACE,
    FO3_ACTORZONE,
    FO3_PROJECTILEZONE,
    FO3_GASTRAP,
    FO3_SHELLCASING,
    FO3_TRANSPARENT_SMALL,
    FO3_INVISIBLE_WALL,
    FO3_TRANSPARENT_SMALL_ANIM,
    FO3_BIPED2,
    FO3_CHARCONTROLLER,
    FO3_AVOIDBOX,
    FO3_COLLISIONBOX,
    FO3_CAMERASPHERE,
    FO3_DOORDETECTION,
    FO3_CAMERAPICK,
    FO3_ITEMPICK,
    FO3_LINEOFSIGHT,
    FO3_PATHPICK,
    FO3_CUSTOMPICK1,
    FO3_CUSTOMPICK2,
    FO3_SPELLEXPLOSION,
    FO3_DROPPINGPICK,
    FO3_NULL,
    FO3_OTHER,
    FO3_HEAD,
    FO3_BODY,
    FO3_SPINE1,
    FO3_SPINE2,
    FO3_L_UPPER_ARM,
    FO3_L_FORE_ARM,
    FO3_L_HAND,
    FO3_L_THIGH,
    FO3_L_CALF,
    FO3_L_FOOT,
    FO3_R_UPPER_ARM,
    FO3_R_FORE_ARM,
    FO3_R_HAND,
    FO3_R_THIGH,
    FO3_R_CALF,
    FO3_R_FOOT,
    FO3_TAIL,
    FO3_SHIELD,
    FO3_QUIVER,
    FO3_WEAPON2,
    FO3_PONYTAIL,
    FO3_WING,
    FO3_PACK,
    FO3_CHAIN,
    FO3_ADDONHEAD,
    FO3_ADDONCHEST,
    FO3_ADDONARM,
    FO3_ADDONLEG
} FO3Layer <name="Collision Layer">;

typedef enum <byte> {
    SK_UNIDENTIFIED,
    SK_STATIC,
    SK_ANIMSTATIC,
    SK_TRANSPARENT,
    SK_CLUTTER,
    SK_WEAPON,
    SK_PROJECTILE,
    SK_SPELL,
    SK_BIPED,
    SK_TREES,
    SK_PROPS,
    SK_WATER,
    SK_TRIGGER,
    SK_TERRAIN,
    SK_TRAP,
    SK_NONCOLLIDABLE,
    SK_CLOUD_TRAP,
    SK_GROUND,
    SK_PORTAL,
    SK_DEBRIS_SMALL,
    SK_DEBRIS_LARGE,
    SK_ACOUSTIC_SPACE,
    SK_ACTORZONE,
    SK_PROJECTILEZONE,
    SK_GASTRAP,
    SK_SHELLCASING,
    SK_TRANSPARENT_SMALL,
    SK_INVISIBLE_WALL,
    SK_TRANSPARENT_SMALL_ANIM,
    SK_WARD,
    SK_CHARCONTROLLER,
    SK_STAIRHELPER,
    SK_DEADBIP,
    SK_BIPED_NO_CC,
    SK_AVOIDBOX,
    SK_COLLISIONBOX,
    SK_CAMERASHPERE,
    SK_DOORDETECTION,
    SK_CONEPROJECTILE,
    SK_CAMERAPICK,
    SK_ITEMPICK,
    SK_LINEOFSIGHT,
    SK_PATHPICK,
    SK_CUSTOMPICK1,
    SK_CUSTOMPICK2,
    SK_SPELLEXPLOSION,
    SK_DROPPINGPICK,
    SK_NULL
} SkyrimLayer <name="Collision Layer">;

typedef enum <byte>
{
    P_OTHER = 0x0,
    P_HEAD = 0x1,
    P_BODY = 0x2,
    P_SPINE1 = 0x3,
    P_SPINE2 = 0x4,
    P_LUPPERARM = 0x5,
    P_LFOREARM = 0x6,
    P_LHAND = 0x7,
    P_LTHIGH = 0x8,
    P_LCALF = 0x9,
    P_LFOOT = 0xA,
    P_RUPPERARM = 0xB,
    P_RFOREARM = 0xC,
    P_RHAND = 0xD,
    P_RTHIGH = 0xE,
    P_RCALF = 0xF,
    P_RFOOT = 0x10,
    P_TAIL = 0x11,
    P_SHIELD = 0x12,
    P_QUIVER = 0x13,
    P_WEAPON = 0x14,
    P_PONYTAIL = 0x15,
    P_WING = 0x16,
    P_PACK = 0x17,
    P_CHAIN = 0x18,
    P_ADDONHEAD = 0x19,
    P_ADDONCHEST = 0x1A,
    P_ADDONLEG = 0x1B,
    P_ADDONARM = 0x1C
} BipedPart <name="Biped Part">;

typedef enum <byte>
{
    BROAD_PHASE_INVALID = 0x0,
    BROAD_PHASE_ENTITY = 0x1,
    BROAD_PHASE_PHANTOM = 0x2,
    BROAD_PHASE_BORDER = 0x3,
    BROAD_PHASE_MAX_ID = 0x4,
} BroadPhaseType <name="Broad Phase Type">;

typedef enum <byte> {
    MOTION_INVALID = 0x0,
    MOTION_DYNAMIC = 0x1,
    MOTION_SPHERE_INERTIA = 0x2,
    MOTION_BOX_INERTIA = 0x3,
    MOTION_KEYFRAMED = 0x4,
    MOTION_FIXED = 0x5,
    MOTION_THIN_BOX_INERTIA = 0x6,
    MOTION_CHARACTER = 0x7,
    MOTION_MAX_ID = 0x8,
} MotionType <name="Motion Type">;

typedef enum <byte> {
    SOLVER_DEACTIVATION_INVALID = 0x0,
    SOLVER_DEACTIVATION_OFF = 0x1,
    SOLVER_DEACTIVATION_LOW = 0x2,
    SOLVER_DEACTIVATION_MEDIUM = 0x3,
    SOLVER_DEACTIVATION_HIGH = 0x4,
    SOLVER_DEACTIVATION_MAX = 0x5,
} SolverDeactivation <name="Solver Deactivation">;

typedef enum <byte> {
    INVALID,
    SIMPLE_CONTACT,
    REPORTING,
    NONE    
} hkResponseType <name="Response Type">;

/*
enum hkpConstraintData::ConstraintType
{
  CONSTRAINT_TYPE_BALLANDSOCKET = 0x0,
  CONSTRAINT_TYPE_HINGE = 0x1,
  CONSTRAINT_TYPE_LIMITEDHINGE = 0x2,
  CONSTRAINT_TYPE_POINTTOPATH = 0x3,
  CONSTRAINT_TYPE_PRISMATIC = 0x6,
  CONSTRAINT_TYPE_RAGDOLL = 0x7,
  CONSTRAINT_TYPE_STIFFSPRING = 0x8,
  CONSTRAINT_TYPE_WHEEL = 0x9,
  CONSTRAINT_TYPE_GENERIC = 0xA,
  CONSTRAINT_TYPE_CONTACT = 0xB,
  CONSTRAINT_TYPE_BREAKABLE = 0xC,
  CONSTRAINT_TYPE_MALLEABLE = 0xD,
  CONSTRAINT_TYPE_POINTTOPLANE = 0xE,
  CONSTRAINT_TYPE_PULLEY = 0xF,
  CONSTRAINT_TYPE_ROTATIONAL = 0x10,
  CONSTRAINT_TYPE_HINGE_LIMITS = 0x12,
  CONSTRAINT_TYPE_RAGDOLL_LIMITS = 0x13,
  CONSTRAINT_TYPE_CUSTOM = 0x14,
  CONSTRAINT_TYPE_RACK_AND_PINION = 0x15,
  CONSTRAINT_TYPE_COG_WHEEL = 0x16,
  CONSTRAINT_TYPE_FIXED = 0x17,
  CONSTRAINT_TYPE_DEFORMABLE_FIXED = 0x18,
  CONSTRAINT_TYPE_LINEAR_SLACK = 0x19,
  BEGIN_CONSTRAINT_CHAIN_TYPES = 0x64,
  CONSTRAINT_TYPE_STIFF_SPRING_CHAIN = 0x64,
  CONSTRAINT_TYPE_BALL_SOCKET_CHAIN = 0x65,
  CONSTRAINT_TYPE_POWERED_CHAIN = 0x66,
};

enum hkpCollidableQualityType
{
  HK_COLLIDABLE_QUALITY_INVALID = 0xFFFFFFFF,
  HK_COLLIDABLE_QUALITY_FIXED = 0x0,
  HK_COLLIDABLE_QUALITY_KEYFRAMED = 0x1,
  HK_COLLIDABLE_QUALITY_DEBRIS = 0x2,
  HK_COLLIDABLE_QUALITY_DEBRIS_SIMPLE_TOI = 0x3,
  HK_COLLIDABLE_QUALITY_MOVING = 0x4,
  HK_COLLIDABLE_QUALITY_CRITICAL = 0x5,
  HK_COLLIDABLE_QUALITY_BULLET = 0x6,
  HK_COLLIDABLE_QUALITY_USER = 0x7,
  HK_COLLIDABLE_QUALITY_CHARACTER = 0x8,
  HK_COLLIDABLE_QUALITY_KEYFRAMED_REPORTING = 0x9,
  HK_COLLIDABLE_QUALITY_MAX = 0xA,
};

typedef enum 
{
  SPHERE = 0x0,
  CYLINDER = 0x1,
  TRIANGLE = 0x2,
  BOX = 0x3,
  CAPSULE = 0x4,
  CONVEX_VERTICES = 0x5,
  TRI_SAMPLED_HEIGHT_FIELD_COLLECTION = 0x6,
  TRI_SAMPLED_HEIGHT_FIELD_BV_TREE = 0x7,
  LIST = 0x8,
  MOPP = 0x9,
  CONVEX_TRANSLATE = 0xA,
  CONVEX_TRANSFORM = 0xB,
  SAMPLED_HEIGHT_FIELD = 0xC,
  EXTENDED_MESH = 0xD,
  TRANSFORM = 0xE,
  COMPRESSED_MESH = 0xF,
  STATIC_COMPOUND = 0x10,
  BV_COMPRESSED_MESH = 0x11,
  COLLECTION = 0x12,
  USER0 = 0x13,
  USER1 = 0x14,
  USER2 = 0x15,
  BV_TREE = 0x16,
  CONVEX = 0x17,
  CONVEX_PIECE = 0x18,
  MULTI_SPHERE = 0x19,
  CONVEX_LIST = 0x1A,
  TRIANGLE_COLLECTION = 0x1B,
  HEIGHT_FIELD = 0x1C,
  SPHERE_REP = 0x1D,
  BV = 0x1E,
  PLANE = 0x1F,
  PHANTOM_CALLBACK = 0x20,
  MULTI_RAY = 0x21,
  INVALID = 0x22,
  FIRST_SHAPE_TYPE = 0x0,
  MAX_SPU_SHAPE_TYPE = 0x16,
  MAX_PPU_SHAPE_TYPE = 0x23,
  ALL_SHAPE_TYPES = 0xFFFFFFFF,
} hkcdShapeType;*/

// Animation

typedef enum <uint> {
    LINEAR_KEY = 1,
    QUADRATIC_KEY,
    TBC_KEY,
    XYZ_ROTATION_KEY,
    CONST_KEY
} KeyType <name="Key Type">;

typedef enum <uint> {
    LSP_RefractionStrength = 0,
    LSP_EnvironmentMapScale = 8,
    LSP_Glossiness,
    LSP_SpecularStrength,
    LSP_EmissiveMultiple,
    LSP_Alpha,
    LSP_UOffset = 20,
    LSP_UScale,
    LSP_VOffset,
    LSP_VScale
} BSLSPControlledVariable <name="Controlled Variable">;

typedef enum <uint> {
    LSP_SpecularColor = 0,
    LSP_EmissiveColor
} BSLSPControlledColor <name="Controlled Color">;

typedef enum <uint> {
    ESP_EmissiveMultiple = 0,
    ESP_FalloffStartAngle,
    ESP_FalloffStopAngle,
    ESP_FalloffStartOpacity,
    ESP_FalloffStopOpacity,
    ESP_AlphaTransparency,
    ESP_UOffset,
    ESP_UScale,
    ESP_VOffset,
    ESP_VScale
} BSESPControlledVariable <name="Controlled Variable">;

typedef enum <uint> {
    ESP_EmissiveColor = 0
} BSESPControlledColor <name="Controlled Color">;


// Legacy Enums

// NiProperty

typedef enum <uint> {
    PX_LAY_PALETTIZED_8,
    PX_LAY_HIGH_COLOR_16,
    PX_LAY_TRUE_COLOR_32,
    PX_LAY_COMPRESSED,
    PX_LAY_BUMPMAP,
    PX_LAY_PALETTIZED_4,
    PX_LAY_DEFAULT,
    PX_LAY_SINGLE_COLOR_8,
    PX_LAY_SINGLE_COLOR_16,
    PX_LAY_SINGLE_COLOR_32,
    PX_LAY_DOUBLE_COLOR_32,
    PX_LAY_DOUBLE_COLOR_64,
    PX_LAY_FLOAT_COLOR_32,
    PX_LAY_FLOAT_COLOR_64,
    PX_LAY_FLOAT_COLOR_128,
    PX_LAY_SINGLE_COLOR_4,
    PX_LAY_DEPTH_24_X8
} PixelLayout <name="Pixel Layout">;

typedef enum <uint> {
    MIP_FMT_NO,
    MIP_FMT_YES,
    MIP_FMT_DEFAULT
} MipMapFormat <name="Mipmap Format">;

typedef enum <uint> {
    ALPHA_NONE,
    ALPHA_BINARY,
    ALPHA_SMOOTH,
    ALPHA_DEFAULT
} AlphaFormat <name="Alpha Format">;

typedef enum <uint> {
    PX_FMT_RGB = 0,
    PX_FMT_RGBA,
    PX_FMT_PAL,
    PX_FMT_PALALPHA,
    PX_FMT_DXT1,
    PX_FMT_DXT3,
    PX_FMT_DXT5,
    PX_FMT_RGB24NONINTERLEAVED,
    PX_FMT_BUMP,
    PX_FMT_BUMPLUMA,
    PX_FMT_RENDERERSPECIFIC,
    PX_FMT_ONE_CHANNEL,
    PX_FMT_TWO_CHANNEL,
    PX_FMT_THREE_CHANNEL,
    PX_FMT_FOUR_CHANNEL,
    PX_FMT_DEPTH_STENCIL,
    PX_FMT_UNKNOWN,
    PX_FMT_MAX
} PixelFormat;

typedef enum <uint> {
    PX_TILE_NONE = 0,
    PX_TILE_XENON,
    PX_TILE_WII,
    PX_TILE_NV_SWIZZLED,
    PX_TILE_MAX
} PixelTiling;

typedef enum <uint> {
    PX_CMP_RED = 0,
    PX_CMP_GREEN,
    PX_CMP_BLUE,
    PX_CMP_ALPHA,
    PX_CMP_COMPRESSED,
    PX_CMP_OFFSET_U,
    PX_CMP_OFFSET_V,         
    PX_CMP_OFFSET_W,
    PX_CMP_OFFSET_Q,
    PX_CMP_LUMA,
    PX_CMP_HEIGHT,
    PX_CMP_VECTOR_X,
    PX_CMP_VECTOR_Y,
    PX_CMP_VECTOR_Z,       
    PX_CMP_PADDING,
    PX_CMP_INTENSITY,
    PX_CMP_INDEX,
    PX_CMP_DEPTH,
    PX_CMP_STENCIL,
    PX_CMP_EMPTY,
    PX_CMP_MAX,
    NUM_COMPS = 4 
} PixelComponent;

typedef enum <uint> {
    PX_REP_NORM_INT = 0,
    PX_REP_HALF,
    PX_REP_FLOAT,
    PX_REP_INDEX,
    PX_REP_COMPRESSED,
    PX_REP_UNKNOWN,
    PX_REP_INT
} PixelRepresentation;

// Objects

typedef enum <uint> {
    RENDERER_XBOX360 = 0,
    RENDERER_PS3,
    RENDERER_DX9,
    RENDERER_D3D10,
    RENDERER_WII,
    RENDERER_GENERIC,
    RENDERER_D3D11
} RendererID;

typedef enum <uint> {
    NI_ANY = 0,
    NI_XENON,
    NI_PS3,
    NI_DX9, 
    NI_WII,
    NI_D3D10
} PlatformID;

typedef enum <uint> {
    PROJECTED_LIGHT,
    PROJECTED_SHADOW,
    ENVIRONMENT_MAP,
    FOG_MAP
} TextureType;

typedef enum <uint> {
    WORLD_PARALLEL,
    WORLD_PERSPECTIVE,
    SPHERE_MAP,
    SPECULAR_CUBE_MAP,
    DIFFUSE_CUBE_MAP
} CoordGenType;

typedef enum <uint> {
    PROPAGATE_ON_SUCCESS,
    PROPAGATE_ON_FAILURE,
    PROPAGATE_ALWAYS,
    PROPAGATE_NEVER
} PropagationMode;

typedef enum <uint> {
    USE_OBB     = 0x00000001,
    USE_TRI     = 0x00000002,
    USE_ABV     = 0x00000004,
    USE_NIBOUND = 0x00000008
} CollisionMode;

// Particles

typedef enum <uint> {
    EMIT_FROM_VERTICES = 0,
    EMIT_FROM_FACE_CENTER,
    EMIT_FROM_EDGE_CENTER,
    EMIT_FROM_FACE_SURFACE,
    EMIT_FROM_EDGE_SURFACE
} MeshEmissionType;

typedef enum <uint> {
    VELOCITY_USE_NORMALS = 0,
    VELOCITY_USE_RANDOM,
    VELOCITY_USE_DIRECTION
} InitialVelocityType;

typedef enum <uint> {
    ALIGN_INVALID = 0x00,
    ALIGN_PER_PARTICLE = 0x01,
    ALIGN_LOCAL_FIXED = 0x02,
    ALIGN_LOCAL_POSITION = 0x5,
    ALIGN_LOCAL_VELOCITY = 0x9,
    ALIGN_CAMERA = 0x10
} AlignMethod;

typedef enum <uint> {
    DECAY_NONE,
    DECAY_LINEAR,
    DECAY_EXPONENTIAL
} DecayType;

typedef enum <uint> {
    SYMM_SPHERICAL,
    SYMM_CYLINDRICAL,
    SYMM_PLANAR
} SymmType;

typedef enum <uint> {
    FORCE_PLANAR,
    FORCE_SPHERICAL
} ForceType;

// NiMesh

typedef enum <uint> {
    PRIMITIVE_TRIANGLES = 0,
    PRIMITIVE_TRISTRIPS,
    PRIMITIVE_LINES,
    PRIMITIVE_LINESTRIPS,
    PRIMITIVE_QUADS,
    PRIMITIVE_POINTS
} PrimitiveType;

typedef enum <uint> {
    CLONE_SHARE,
    CLONE_COPY,
    CLONE_BLANK_COPY
} CloningBehavior;

typedef enum <uint> {
    F_UNKNOWN             = 0x00000000,
    F_INT8_1              = 0x00010101,
    F_INT8_2              = 0x00020102,
    F_INT8_3              = 0x00030103,
    F_INT8_4              = 0x00040104,
    F_UINT8_1             = 0x00010105,
    F_UINT8_2             = 0x00020106,
    F_UINT8_3             = 0x00030107,
    F_UINT8_4             = 0x00040108,
    F_NORMINT8_1          = 0x00010109,
    F_NORMINT8_2          = 0x0002010A,
    F_NORMINT8_3          = 0x0003010B,
    F_NORMINT8_4          = 0x0004010C,
    F_NORMUINT8_1         = 0x0001010D,
    F_NORMUINT8_2         = 0x0002010E,
    F_NORMUINT8_3         = 0x0003010F,
    F_NORMUINT8_4         = 0x00040110,
    F_INT16_1             = 0x00010211,
    F_INT16_2             = 0x00020212,
    F_INT16_3             = 0x00030213,
    F_INT16_4             = 0x00040214,
    F_UINT16_1            = 0x00010215,
    F_UINT16_2            = 0x00020216,
    F_UINT16_3            = 0x00030217,
    F_UINT16_4            = 0x00040218,
    F_NORMINT16_1         = 0x00010219,
    F_NORMINT16_2         = 0x0002021A,
    F_NORMINT16_3         = 0x0003021B,
    F_NORMINT16_4         = 0x0004021C,
    F_NORMUINT16_1        = 0x0001021D,
    F_NORMUINT16_2        = 0x0002021E,
    F_NORMUINT16_3        = 0x0003021F,
    F_NORMUINT16_4        = 0x00040220,
    F_INT32_1             = 0x00010421,
    F_INT32_2             = 0x00020422,
    F_INT32_3             = 0x00030423,
    F_INT32_4             = 0x00040424,
    F_UINT32_1            = 0x00010425,
    F_UINT32_2            = 0x00020426,
    F_UINT32_3            = 0x00030427,
    F_UINT32_4            = 0x00040428,
    F_NORMINT32_1         = 0x00010429,
    F_NORMINT32_2         = 0x0002042A,
    F_NORMINT32_3         = 0x0003042B,
    F_NORMINT32_4         = 0x0004042C,
    F_NORMUINT32_1        = 0x0001042D,
    F_NORMUINT32_2        = 0x0002042E,
    F_NORMUINT32_3        = 0x0003042F,
    F_NORMUINT32_4        = 0x00040430,
    F_FLOAT16_1           = 0x00010231,
    F_FLOAT16_2           = 0x00020232,
    F_FLOAT16_3           = 0x00030233,
    F_FLOAT16_4           = 0x00040234,
    F_FLOAT32_1           = 0x00010435,
    F_FLOAT32_2           = 0x00020436,
    F_FLOAT32_3           = 0x00030437,
    F_FLOAT32_4           = 0x00040438,
    F_UINT_10_10_10_L1    = 0x00010439,
    F_NORMINT_10_10_10_L1 = 0x0001043A,
    F_NORMINT_11_11_10    = 0x0001043B,
    F_NORMUINT8_4_BGRA    = 0x0004013C,
    F_NORMINT_10_10_10_2  = 0x0001043D,
    F_UINT_10_10_10_2     = 0x0001043E,
    F_TYPE_COUNT = 63,
    F_MAX_COMP_SIZE = 16
} DataStreamFormat;

typedef enum <uint> {
    CPU_READ = 0x01,
    CPU_WRITE_STATIC = 0x02,
    CPU_WRITE_MUTABLE = 0x04,
    CPU_WRITE_VOLATILE = 0x08,
    GPU_READ = 0x10,
    GPU_WRITE = 0x20,
    CPU_WRITE_STATIC_INITIALIZED = 0x40,

    // Cannot make a bitfield struct because it is a local variable,
    // so cover most of the combinations with bit patterns
    CPU_READ_WRITE = CPU_READ | CPU_WRITE_STATIC,
    CPU_WRITE_GPU_READ = GPU_READ | CPU_WRITE_STATIC,
    CPU_READWRITE_GPU_READ = GPU_READ | CPU_WRITE_STATIC | CPU_READ,
    CPU_READ_WRITE_MUT = CPU_READ | CPU_WRITE_MUTABLE,
    CPU_WRITE_MUT_GPU_READ = GPU_READ | CPU_WRITE_MUTABLE,
    CPU_READWRITE_MUT_GPU_READ = GPU_READ | CPU_WRITE_MUTABLE | CPU_READ,
    CPU_READ_WRITE_VOL = CPU_READ | CPU_WRITE_VOLATILE,
    CPU_WRITE_VOL_GPU_READ = GPU_READ | CPU_WRITE_VOLATILE,
    CPU_READWRITE_VOL_GPU_READ = GPU_READ | CPU_WRITE_VOLATILE | CPU_READ,
    CPU_WRITE_ANY = CPU_WRITE_MUTABLE | CPU_WRITE_STATIC | CPU_WRITE_VOLATILE,
} DataStreamAccess;

typedef enum <uint> {
    USAGE_VERTEX_INDEX,
    USAGE_VERTEX,
    USAGE_SHADERCONSTANT,
    USAGE_USER,
    USAGE_DISPLAYLIST
} DataStreamUsage;
