//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: NIF.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.nif,*.kf,*.bto,*.btr,*.psa,*.rdt
//  ID Bytes: 47 61 6D 65 62 72 79 6F 20 46 69 6C 65 20 46 6F 72 6D 61 74 2C 20 56 65 72 73 69 6F 6E 20 32 30 2E 32 2E 30 2E 37 0A 07 00 02 14 01 [+1] 00 00 00
//   History: 
//------------------------------------------------

// FUNCTIONS

#include "VersionFuncs.bt"

// DATATYPES

#include "Enums.bt"
#include "BasicTypes.bt"
#include "Anim.bt"
#include "ExtraData.bt"
#include "SkinTypes.bt"
#include "bhk.bt"

// Undecoded Block
typedef struct (int i) {
    local int index <hidden=true> = i;
    byte data[header.blocksize[i]] <open=suppress>;
    local string s = file.header.btype[file.header.btypeindex[i].index].str;
    Printf( "Unknown Block: %s\r\n", s );
} Block <name="~~Undecoded~~", comment=BlockComment, fgcolor=0x0055FF, bgcolor=0xDDFFFF>;

string BlockComment( Block& b )
{
    string s;
    SPrintf(s, "%s", file.header.btype[file.header.btypeindex[b.index].index].str);
    return s;
}

typedef enum {
    R_OK = 0x1,
    R_UNKBLOCKS = 0x2,
    R_EOF = 0x4
} ReturnCodes;

// DECODED BLOCKS

#include "Objects.bt"
#include "Nodes.bt"
#include "Geometry.bt"
#include "Particles.bt"
#include "Shader.bt"
#include "Property.bt"

struct FILE {
    local int result = 0;
    struct HEADER {
        local string hdr = ReadLine(0);
        char HeaderString[Strlen(hdr)] <open=suppress>;

        // Obtain the version string from the header string
        local int result, size;
        result = RegExSearch( hdr, versionRegex, size );
        // Convert the version string into an integer
        local uint verFromStr = GetVersionFromString( SubStr( hdr, result, size - 1 ) );

        if ( verFromStr > V3_1 ) {
            uint version <format=hex>;
            Assert( version == verFromStr, "Numeric version does not match version obtained from header string" );
        } else {
            local uint version = verFromStr;
            local int i = 0;
            local string copy;
            for ( i; i < 3; i++ ) {
                copy = ReadLine(FTell());
                struct {
                    char CopyrightString[Strlen(copy)];
                } Copyright <optimize=false>;
            }
        }

        // Endianness
        if ( version >= Version(20, 0, 0, 3) )
            byte littleEndian;
        else
            local byte littleEndian = 1;

        // User defined version
        if ( version >= Version(10, 0, 1, 8) )
            int userVersion;
        else
            local int userVersion = 0;

        int numblocks;
        
        if ( version == V20_2_0_7 || IsOblivion(version, userVersion) ) {
            // Bethesda BSStreamHeader
            uint stream;
            SSTRING8 author; // 64 limit
            SSTRING8 processScript; // 64 limit
            SSTRING8 exportScript; // 64 limit
            if ( stream == 130 )
                SSTRING8 maxFilePath;
        } else if ( version >= V30_0_0_2 ) {
            local int stream = 12; // Fake stream version
            // Embedded PNG files for file thumbnail
            int embedDataSize;
            if ( embedDataSize > 0 ) {
                int numEmbeds;
                if ( numEmbeds > 0 ) {
                    int embedSizes[numEmbeds];
                    local int i;
                    for ( i = 0; i < numEmbeds; i++ )
                        byte data[embedSizes[i]];
                }
            }
        } else {
            local int stream = 0; // Fake stream version
        }

        if ( version >= Version(5, 0, 0, 1) ) {
            ushort numblocktypes;
            SSTRING btype[numblocktypes] <optimize=false, open=suppress>;
            BLOCKTYPEINDEX btypeindex[numblocks] <optimize=false, open=suppress>;
        }

        if ( version >= Version(20, 2, 0, 5) )
            uint blocksize[numblocks] <open=suppress>;
        
        if ( version >= Version(20, 1, 0, 1) ) {
            uint numstrings;
            uint maxstringlength;
            
            if ( numstrings > 0 )
                SSTRING strs[numstrings] <optimize=false, open=suppress>;
        }
        
        if ( version >= Version(5, 0, 0, 6) ) {
            uint numGroups;
            if ( numGroups > 0 )
                uint size[numGroups];
        }

    } header <bgcolor=cLtGray>;

    local uint version = header.version;
    local uint stream = header.stream;
    local int unkBlocks <hidden=true> = 0;

    Assert( version >= V20_2_0_7, "This NIF version is not supported." );

    struct BLOCKS {
        local int i <hidden=true>;
        for ( i = 0 ; i < header.numblocks; i++ )
        {
            switch( header.btype[header.btypeindex[i].index].str )
            {
                case "NiNode":
                    NiNode data;
                    break;
                case "BSFadeNode":
                    BSFadeNode data;
                    break;
                case "NiTriShape":
                    NiTriShape data;
                    break;
                case "BSTriShape":
                    BSTriShape data;
                    break;
                case "BSSubIndexTriShape":
                    BSSubIndexTriShape data;
                    break;
                case "NiTriStrips":
                    NiTriStrips data;
                    break;
                case "NiTriShapeData":
                    NiTriShapeData data;
                    break;
                case "NiTriStripsData":
                    NiTriStripsData data;
                    break;
                case "NiAdditionalGeometryData":
                    NiAdditionalGeometryData data;
                    break;
                case "BSLODTriShape":
                    BSLODTriShape data;
                    break;
                case "BSMeshLODTriShape":
                    BSMeshLODTriShape data;
                    break;
                case "BSDynamicTriShape":
                    BSDynamicTriShape data;
                    break;
                case "BSSegmentedTriShape":
                    BSSegmentedTriShape data;
                    break;
                case "NiParticleSystem":
                    NiParticleSys data;
                    break;
                case "NiPSysData":
                    NiPSysData data;
                    break;
                case "BSLightingShaderProperty":
                    BSLightingShaderProperty data;
                    break;
                case "BSEffectShaderProperty":
                    BSEffectShaderProperty data;
                    break;
                case "BSShaderTextureSet":
                    BSShaderTextureSet data;
                    break;
                case "NiAlphaProperty":
                    NiAlphaProperty data;
                    break;
                case "BSWaterShaderProperty":
                    BSWaterShaderProperty data;
                    break;
                case "NiSkinInstance":
                    NiSkinInstance data;
                    break;
                case "NiSkinData":
                    NiSkinData data;
                    break;
                case "NiSkinPartition":
                    NiSkinPartition data;
                    break;
                case "BSDismemberSkinInstance":
                    BSDSkinInstance data;
                    break;
                case "BSSkin::Instance":
                    BSSkinInstance data;
                    break;
                case "BSSkin::BoneData":
                    BSSkinBoneData data;
                    break;
                case "BSLeafAnimNode":
                    BSLeafAnimNode data;
                    break;
                case "BSTreeNode":
                    BSTreeNode data;
                    break;
                case "NiSwitchNode":
                    NiSwitchNode data;
                    break;
                case "NiBillboardNode":
                    NiBBNode data;
                    break;
                case "BSOrderedNode":
                    BSOrderedNode data;
                    break;
                case "BSMultiBoundNode":
                    BSMultiBoundNode data;
                    break;
                case "BSValueNode":
                    BSValueNode data;
                    break;
                case "NiDefaultAVObjectPalette":
                    NiAVObjPalette data;
                    break;
                case "NiControllerManager":
                    NiControllerMgr data;
                    break;
                case "NiControllerSequence":
                    NiControllerSequence data;
                    break;
                case "NiTransformController":
                    NiTransCtlr data;
                    break;
                case "NiMultiTargetTransformController":
                    NiMultiTransCtlr data;
                    break;
                case "NiVisController":
                    NiVisCtlr data;
                    break;
                case "NiFloatExtraDataController":
                    NiFloatEDCtlr data;
                    break;
                case "NiPSysModifierActiveCtlr":
                    NiPSysActiveCtlr data;
                    break;
                case "NiPSysEmitterCtlr":
                    NiPSysEmitterCtlr data;
                    break;
                case "BSPSysMultiTargetEmitterCtlr":
                    BSPSysMultiTargetEmitterCtlr data;
                    break;
                case "NiPSysUpdateCtlr":
                    NiPSysUpdateCtlr data;
                    break;
                case "NiPSysGravityStrengthCtlr":
                    NiPSysGravStrCtlr data;
                    break;
                case "NiPSysEmitterLifeSpanCtlr":
                    NiPSEmitLifeSpanCtlr data;
                    break;
                case "NiPSysEmitterSpeedCtlr":
                    NiPSEmitSpeedCtlr data;
                    break;
                case "NiPSysEmitterInitialRadiusCtlr":
                    NiPSEmitIRadiusCtlr data;
                    break;
                case "NiPSysEmitterPlanarAngleCtlr":
                    NiPSEmitPlanarAngleCtlr data;
                    break;
                case "NiPSysEmitterPlanarAngleVarCtlr":
                    NiPSEmitPlanarAngleVarCtlr data;
                    break;
                case "NiPSysEmitterDeclinationCtlr":
                    NiPSEmitDeclinationCtlr data;
                    break;
                case "NiPSysEmitterDeclinationVarCtlr":
                    NiPSEmitDeclinationVarCtlr data;
                    break;
                case "BSStripParticleSystem":
                    BSStripParticleSys data;
                    break;
                case "BSMasterParticleSystem":
                    BSMasterParticleSystem data;
                    break;
                case "BSStripPSysData":
                    BSStripPSysData data;
                    break;
                case "BSLightingShaderPropertyFloatController":
                    BSLSPFloatCtlr data;
                    break;
                case "BSLightingShaderPropertyColorController":
                    BSLSPColorCtlr data;
                    break;
                case "BSEffectShaderPropertyFloatController":
                    BSESPFloatCtlr data;
                    break;
                case "BSEffectShaderPropertyColorController":
                    BSESPColorCtlr data;
                    break;
                case "BSNiAlphaPropertyTestRefController":
                    BSNiAlphaCtlr data;
                    break;
                case "NiLightColorController":
                    NiLightColorCtlr data;
                    break;
                case "NiLightRadiusController":
                    NiLightRadiusCtlr data;
                    break;
                case "NiLightDimmerController":
                    NiLightDimmerCtlr data;
                    break;
                case "NiBSBoneLODController":
                    NiBSBoneLODCtlr data;
                    break;
                case "BSLagBoneController":
                    BSLagBoneCtlr data;
                    break;
                case "BSProceduralLightningController":
                    BSPLightningCtlr data;
                    break;
                case "NiTransformInterpolator":
                    NiTransformInterp data;
                    break;
                case "NiPoint3Interpolator":
                    NiPoint3Interp data;
                    break;
                case "NiBlendPoint3Interpolator":
                    NiBlendPoint3 data;
                    break;
                case "NiFloatInterpolator":
                    NiFloatInterp data;
                    break;
                case "NiBlendFloatInterpolator":
                    NiBlendFloat data;
                    break;
                case "NiBoolInterpolator":
                    NiBoolInterp data;
                    break;
                case "NiBlendBoolInterpolator":
                    NiBlendBool data;
                    break;
                case "NiBoolTimelineInterpolator":
                    NiBoolTimeInterp data;
                    break;
                case "NiLookAtInterpolator":
                    NiLookAtInterp data;
                    break;
                case "NiPathInterpolator":
                    NiPathInterp data;
                    break;
                case "NiFloatData":
                    NiFloatData data;
                    break;
                case "NiBoolData":
                    NiBoolData data;
                    break;
                case "NiKeyFrameData":
                    NiKFData data;
                    break;
                case "NiTransformData":
                    NiTransformData data;
                    break;
                case "NiPosData":
                    NiPosData data;
                    break;
                case "BSXFlags":
                    BSXFlags data;
                    break;
                case "bhkRigidBody":
                    bhkRigidBody data;
                    break;
                case "bhkRigidBodyT":
                    bhkRigidBodyT data;
                    break;
                case "bhkCollisionObject":
                    bhkCollisionObj data;
                    break;
                case "bhkSPCollisionObject":
                    bhkSPCollObj data;
                    break;
                case "bhkPCollisionObject":
                    bhkPCollObj data;
                    break;
                case "bhkNPCollisionObject":
                    bhkNPCollObj data;
                    break;
                case "bhkBlendCollisionObject":
                    bhkBlendCollisionObj data;
                    break;
                case "bhkMoppBvTreeShape":
                    bhkMoppBVShape data;
                    break;
                case "bhkCompressedMeshShape":
                    bhkCMS data;
                    break;
                case "bhkCompressedMeshShapeData":
                    bhkCMSD data;
                    break;
                case "bhkPlaneShape":
                    bhkPlaneShape data;
                    break;
                case "bhkSphereShape":
                    bhkSphereShape data;
                    break;
                case "bhkBoxShape":
                    bhkBoxShape data;
                    break;
                case "bhkCapsuleShape":
                    bhkCapsuleShape data;
                    break;
                case "bhkConvexVerticesShape":
                    bhkCVS data;
                    break;
                case "bhkTransformShape":
                    bhkTS data;
                    break;
                case "bhkConvexTransformShape":
                    bhkCTS data;
                    break;
                case "bhkListShape":
                    bhkListShape data;
                    break;
                case "bhkSimpleShapePhantom":
                    bhkSSPhantom data;
                    break;
                case "bhkAabbPhantom":
                    bhkAabbPhantom data;
                    break;
                case "bhkNiTriStripsShape":
                    bhkNiTriStripsShape data;
                    break;
                case "bhkPhysicsSystem":
                    bhkPhysSystem data;
                    break;
                case "bhkRagdollSystem":
                    bhkRagSystem data;
                    break;
                case "BSMultiBound":
                    BSMultiBound data;
                    break;
                case "BSMultiBoundOBB":
                    BSMultiBoundOBB data;
                    break;
                case "BSMultiBoundAABB":
                    BSMultiBoundAABB data;
                    break;
                case "BSMultiBoundSphere":
                    BSMultiBoundSphere data;
                    break;
                case "NiExtraData":
                    NiExtraData data;
                    break;
                case "NiBooleanExtraData":
                    NiBoolED data;
                    break;
                case "NiFloatExtraData":
                    NiFloatED data;
                    break;
                case "NiIntegerExtraData":
                    NiIntegerED data;
                    break;
                case "NiStringExtraData":
                    NiStringED data;
                    break;
                case "NiStringsExtraData":
                    NiStringsED data;
                    break;
                case "NiTextKeyExtraData":
                    NiTextKeyED data;
                    break;
                case "NiBinaryExtraData":
                    NiBinaryED data;
                    break;
                case "BSBoneLODExtraData":
                    BSBoneLODED data;
                    break;
                case "BSBound":
                    BSBound data;
                    break;
                case "BSDecalPlacementVectorExtraData":
                    BSDecalPlacementVectorED data;
                    break;
                case "BSDistantObjectLargeRefExtraData":
                    BSDistantObjectLargeRefED data;
                    break;
                case "BSWArray":
                    BSWArray data;
                    break;
                case "BSConnectPoint::Parents":
                    BSConnectPtParents data;
                    break;
                case "BSConnectPoint::Children":
                    BSConnectPtChildren data;
                    break;
                case "BSEyeCenterExtraData":
                    BSEyeCenterED data;
                    break;
                case "BSPositionData":
                    BSPositionData data;
                    break;
                case "BSInvMarker":
                    BSInvMarker data;
                    break;
                case "BSFurnitureMarkerNode":
                    BSFurnitureMarkerNode data;
                    break;
                case "BSFurnitureMarker":
                    BSFurnitureMarker data;
                    break;
                case "BSBehaviorGraphExtraData":
                    BSBGED data;
                    break;
                case "BSDebrisNode":
                    BSDebrisNode data;
                    break;
                case "BSBlastNode":
                    BSBlastNode data;
                    break;
                case "BSDamageStage":
                    BSDamageStage data;
                    break;
                case "NiPointLight":
                    NiPointLight data;
                    break;
                case "NiAmbientLight":
                    NiAmbientLight data;
                    break;
                case "NiCamera":
                    NiCamera data;
                    break;
                case "BSFrustumFOVController":
                    BSFrustumCtlr data;
                    break;
                case "NiPSysAgeDeathModifier":
                    NiPSAgeDeathMod data;
                    break;
                case "NiPSysSpawnModifier":
                    NiPSSpawnMod data;
                    break;
                case "NiPSysColorModifier":
                    NiPSColorMod data;
                    break;
                case "BSPSysSimpleColorModifier":
                    BSPSSimpleColorMod data;
                    break;
                case "NiPSysRotationModifier":
                    NiPSRotationMod data;
                    break;
                case "BSPSysScaleModifier":
                    BSPSScaleMod data;
                    break;
                case "BSPSysLODModifier":
                    BSPSLODMod data;
                    break;
                case "NiPSysGravityModifier":
                    NiPSGravityMod data;
                    break;
                case "NiPSysDragModifier":
                    NiPSDragMod data;
                    break;
                case "NiPSysPositionModifier":
                    NiPSPositionMod data;
                    break;
                case "NiPSysBoundUpdateModifier":
                    NiPSBoundUpdateMod data;
                    break;
                case "BSPSysSubTexModifier":
                    BSPSysSubTexMod data;
                    break;
                case "NiPSysBombModifier":
                    NiPSysBombMod data;
                    break;
                case "BSWindModifier":
                    BSWindModifier data;
                    break;
                case "BSParentVelocityModifier":
                    BSParentVelocityMod data;
                    break;
                case "BSPSysInheritVelocityModifier":
                    BSPSInheritVelMod data;
                    break;
                case "BSPSysHavokUpdateModifier":
                    BSPSHavokUpdateMod data;
                    break;
                case "BSPSysRecycleBoundModifier":
                    BSPSRecycleBoundMod data;
                    break;
                case "BSPSysStripUpdateModifier":
                    BSPSStripUpdateMod data;
                    break;
                case "NiPSysColliderManager":
                    NiPSysColliderMgr data;
                    break;
                case "NiPSysMeshEmitter":
                    NiPSysMeshEmitter data;
                    break;
                case "NiPSysSphereEmitter":
                    NiPSysSphereEmitter data;
                    break;
                case "NiPSysBoxEmitter":
                    NiPSysBoxEmitter data;
                    break;
                case "NiPSysCylinderEmitter":
                    NiPSysCylinderEmitter data;
                    break;
                case "NiPSysPlanarCollider":
                    NiPSysPlanarColl data;
                    break;
                case "NiPSysSphericalCollider":
                    NiPSysSphColl data;
                    break;
                case "bhkHingeConstraint":
                    bhkHingeConstraint data;
                    break;
                case "bhkLimitedHingeConstraint":
                    bhkLHConstraint data;
                    break;
                case "bhkRagdollConstraint":
                    bhkRagConstraint data;
                    break;
                case "bhkBreakableConstraint":
                    bhkBreakConstraint data;
                    break;
                case "bhkStiffSpringConstraint":
                    bhkSSpringConstraint data;
                    break;
                case "bhkBallAndSocketConstraint":
                    bhkBASConstraint data;
                    break;
                case "bhkPrismaticConstraint":
                    bhkPrismaticConstraint data;
                    break;
                case "bhkMalleableConstraint":
                    bhkMalleableConstraint data;
                    break;
                case "bhkBallSocketConstraintChain":
                    bhkBASConstraintChain data;
                    break;
                case "bhkRagdollTemplate":
                    bhkRagdollTemplate data;
                    break;
                case "bhkRagdollTemplateData":
                    bhkRagdollTemplateData data;
                    break;
                case "NiMeshParticleSystem":
                    NiMeshParticleSys data;
                    break;
                case "NiMeshPSysData":
                    NiMeshPSysData data;
                    break;
                case "BSShaderNoLightingProperty":
                    BSShaderNoLightingProperty data;
                    break;
                case "BSShaderPPLightingProperty":
                    BSShaderPPLightingProperty data;
                    break;
                case "Lighting30ShaderProperty":
                    Lighting30ShaderProperty data;
                    break;
                case "SkyShaderProperty":
                    SkyShaderProperty data;
                    break;
                case "TallGrassShaderProperty":
                    TallGrassShaderProperty data;
                    break;
                case "TileShaderProperty":
                    TileShaderProperty data;
                    break;
                case "WaterShaderProperty":
                    WaterShaderProperty data;
                    break;
                case "NiFogProperty":
                    NiFogProperty data;
                    break;
                case "NiMaterialProperty":
                    NiMaterialProperty data;
                    break;
                case "NiStencilProperty":
                    NiStencilProperty data;
                    break;
                case "NiTexturingProperty":
                    NiTexturingProperty data;
                    break;
                case "NiSourceTexture":
                    NiSourceTexture data;
                    break;
                case "NiMorphData":
                    NiMorphData data;
                    break;
                case "NiColorData":
                    NiColorData data;
                    break;
                case "NiGeomMorpherController":
                    NiGeomMorpherCtlr data;
                    break;
                case "bhkBlendController":
                    bhkBlendController data;
                    break;
                case "NiAlphaController":
                    NiAlphaController data;
                    break;
                case "NiMaterialColorController":
                    NiMaterialColorCtlr data;
                    break;
                case "NiTextureTransformController":
                    NiTextureTransformCtlr data;
                    break;
                case "BSMaterialEmittanceMultController":
                    BSMatEmitMultCtlr data;
                    break;
                case "BSRefractionStrengthController":
                    BSRefractionStrCtlr data;
                    break;
                case "NiPSysGrowFadeModifier":
                    NiPSysGrowFadeMod data;
                    break;
                case "bhkConvexListShape":
                    bhkConvexListShape data;
                    break;
                case "bhkOrientHingedBodyAction":
                    bhkOrientHingedBodyAction data;
                    break;
                case "bhkLiquidAction":
                    bhkLiquidAction data;
                    break;
                case "bhkPackedNiTriStripsShape":
                    bhkPackedNiTriStripsShape data;
                    break;
                case "hkPackedNiTriStripsData":
                    hkPackedNiTriStripsData data;
                    break;
                case "bhkPoseArray":
                    bhkPoseArray data;
                    break;
                case "BSAnimNotes":
                    BSAnimNotes data;
                    break;
                case "BSAnimNote":
                    BSAnimNote data;
                    break;
                default:
                    Block data(i) <open=suppress>;
                    unkBlocks++;
                    break;
            }
        }
        
    } blocks <open=true>;

    struct FOOTER {
        RefArray root( "Root" );
    } footer;

    Assert( FEof(), "Did not reach end of file." );

    // Command Line return codes
    if ( unkBlocks > 0 )
        result |= R_UNKBLOCKS;
    if ( FEof() )
        result |= R_OK;
    else
        result |= R_EOF;

    Exit( result );
} file <open=true>;
