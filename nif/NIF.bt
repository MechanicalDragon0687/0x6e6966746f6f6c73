//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: NIF.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.nif,*.kf,*.bto,*.btr,*.psa,*.rdt,*.nifcache,*.nft,*.item
//  ID Bytes: 47 61 6D 65 62 72 79 6F 20 46 69 6C 65 20 46 6F 72 6D 61 74 2C 20 56 65 72 73 69 6F 6E 20
//   History: 
//------------------------------------------------

// FUNCTIONS

#include "VersionFuncs.bt"

// 010 Attribute defines
#define OPT optimize=true
#define OPTOPEN open=true, optimize=true
#define OPTARRAY open=suppress, optimize=true

// DATATYPES

#include "Enums.bt"
#include "Bitflags.bt"
#include "BasicTypes.bt"
#include "AnimTypes.bt"
#include "SkinTypes.bt"

typedef enum {
    R_OK = 0x1,
    R_UNKBLOCKS = 0x2,
    R_EOF = 0x4,
    R_HDR = 0x8
} ReturnCodes;

typedef enum {
    RTTI_MISSING = 0,
    RTTI_FOUND = 1
} RTTICode;

// DECODED BLOCKS

#include "Objects.bt"
#include "ExtraData.bt"
#include "Nodes.bt"
#include "Geometry.bt"
#include "Anim.bt"
#include "Particles.bt"
#include "Property.bt"
#include "Shader.bt"
#include "PhysX.bt"
#include "bhk.bt"

// RTTI

#include "RTTI.bt"
#include "RTTIBeth.bt"

struct FILE {
    local int result = 0;
    struct HEADER {
        local string hdr = ReadLine(0);
        char HeaderString[Strlen(hdr)] <open=suppress>;

        if ( !IS_GAMEBRYO && !IS_NETIMMERSE && !IS_NDS )
            Exit( R_HDR );
        
        local uint verFromStr <format=hex> = MISSING;
        if ( Strstr( hdr, VERSTR ) > 0 ) {
            // Obtain the version string from the header string
            local int result, size;
            result = RegExSearch( hdr, versionRegex, size );
            // Convert the version string into an integer
            verFromStr = GetVersionFromString( SubStr( hdr, result, size - 1 ) );
            if ( verFromStr == 0 )
                Exit( R_HDR );
        }

        if ( verFromStr > V3_1 && !IS_NDS ) {
            uint version <format=hex>;
            if ( verFromStr != MISSING )
                Assert( version == verFromStr, "Numeric version does not match version obtained from header string" );
        } else if ( IS_NDS ) {
            uint versionHdr; // Unknown
            local uint version = verFromStr;
        } else {
            local uint version = verFromStr;
            local int i = 0;
            local string copy;
            for ( i; i < 3; i++ ) {
                copy = ReadLine(FTell());
                struct {
                    char CopyrightString[Strlen(copy)];
                } Copyright <optimize=false>;
            }
        }

        // Endianness
        if ( version >= Version(20, 0, 0, 3) )
            byte littleEndian;
        else
            local byte littleEndian = 1;

        // User defined version
        if ( version >= Version(10, 0, 1, 8) )
            uint userVersion;
        else
            local uint userVersion = 0;

        int numblocks;
        
        if ( IsBethesda(version, userVersion) ) {
            // Bethesda BSStreamHeader
            uint stream;
            SSTRING8 author; // 64 limit
            SSTRING8 processScript; // 64 limit
            SSTRING8 exportScript; // 64 limit
            if ( stream == 130 )
                SSTRING8 maxFilePath;
        } else if ( version >= V30_0_0_2 ) {
            local int stream = 0; // Fake stream version
            // Embedded PNG files for file thumbnail
            int embedDataSize;
            local int dataPassed = 0;
            while ( dataPassed < embedDataSize ) {
                uint tag;
                dataPassed += 4;
                struct {
                    uint embedSize;
                    dataPassed += embedSize + 4;
                    byte data[embedSize];
                } embed;
            }
        } else {
            local int stream = 0; // Fake stream version
        }

        if ( version >= Version(5, 0, 0, 1) ) {
            ushort numblocktypes;
            SSTRING btype[numblocktypes] <optimize=false, open=suppress>;
            BLOCKTYPEINDEX btypeindex[numblocks] <optimize=false, open=suppress>;
        }

        if ( version >= Version(20, 2, 0, 5) )
            uint blocksize[numblocks] <open=suppress>;
        
        if ( version >= Version(20, 1, 0, 1) ) {
            uint numstrings;
            uint maxstringlength;
            
            if ( numstrings > 0 )
                SSTRING strs[numstrings] <optimize=false, open=suppress>;
        }
        
        if ( version >= Version(5, 0, 0, 6) ) {
            uint numGroups;
            if ( numGroups > 0 )
                uint size[numGroups];
        }

    } header <bgcolor=cLtGray>;

    local uint version = header.version;
    local uint userVersion = header.userVersion;
    local uint stream = header.stream;
    local int unkBlocks <hidden=true> = 0;

    Assert( version >= V10_1_0_0, "This NIF version is not supported." );

    struct BLOCKS {
        local int i <hidden=true>;
        local int j <hidden=true>;
        local string str <hidden=true>;
        local string strClean <hidden=true>;
        local uint args[2] <hidden=true>;
        local char argChars[2] <hidden=true>;
        local uint iArg <hidden=true> = 0;

        for ( i = 0 ; i < header.numblocks; i++ )
        {
            if ( version >= V5_0_0_1 ) {
                str = header.btype[header.btypeindex[i].index].str;
            } else {
                SSTRING blockString;
                str = blockString.str;
            }

            if ( Strstr( str, "NiDataStream" ) == 0 ) {
                // e.g. split "NiDataStream\0011\00118" to "NiDataStream", "1", "18"
                // and convert "1" and "18" to integers
                for ( j = 0; j < Strlen(str); j++ ) {
                    if ( str[j] == 0x01 ) {
                        if ( iArg == 0 ) {
                            strClean = SubStr( str, 0, j );
                            args[iArg] = Atoi(str[j+1]);
                        } else {
                            argChars[0] = str[j+1];
                            argChars[1] = (j + 2 < Strlen(str)) ? str[j+2] : '\0';
                            args[iArg] = Atoi(argChars);
                        }
                        iArg = !iArg;
                    }
                }
                str = strClean;
            }

            // Do Bethesda RTTI only for Bethesda NIFs
            if ( stream > 0 && BethRTTI( str, stream ) == RTTI_FOUND )
                continue;
            
            // Official RTTI
            if ( RTTI( str ) == RTTI_FOUND )
                continue;
            
            // Custom RTTI
            if ( CustomRTTI( str ) == RTTI_FOUND )
                continue;

            Block data(i) <open=suppress>;
            unkBlocks++;
        }
        
    } blocks <open=true>;

    struct FOOTER {
        RefArray root( "Root" );
    } footer;
    
    // Bully SE files are padded to the nearest 2048, do not assert EOF for them
    local uint remainder <hidden=true> = FileSize() - FTell();
    local byte assertEOF <hidden=true> = 1;
    if ( version == V20_3_0_9 && userVersion == 0 && FileSize() % 2048 == 0 && remainder <= 2048 )
        assertEOF = 0;
    
    if ( assertEOF )
        Assert( FEof(), "Did not reach end of file." );

    // Command Line return codes
    if ( unkBlocks > 0 )
        result |= R_UNKBLOCKS;
    if ( FEof() || !assertEOF )
        result |= R_OK;
    else
        result |= R_EOF;

    Exit( result );
} file <open=true>;
