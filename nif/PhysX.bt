//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: PhysX.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    NiObjectNET base;
    float scalePtoW;
    RefArray sources( "Source" ); // NiPhysXSrc
    RefArray dests( "Dest" ); // NiPhysXDest
    if ( version >= Version(20, 4, 0, 0) )
        RefArray modifiedMeshes( "Modified Mesh" ); // NiMesh

    if ( version >= Version(30, 1, 0, 2) && version < Version(30, 2, 0, 3) )
        STRING tempName;

    bool keepMeshes;
    Ref propDesc; // NiPhysXPropDesc
} NiPhysXProp <name="NiPhysXProp">;


typedef struct {
    NIOBJECT
    RefArray actors( "Actor" ); // NiPhysXActorDesc
    RefArray joints( "Joint" ); // NiPhysXJointDesc
    if ( version >= Version(20, 3, 0, 5) )
        RefArray clothes( "Cloth" ); // NiPhysXClothDesc
    
    uint numMaterials;
    if ( numMaterials > 0 ) {
        struct {
            ushort key;
            Ref materialDesc; // NiPhysXMaterialDesc
        } material[numMaterials] <optimize=true>;
    }

    uint numStates;
    if ( version >= Version(20, 4, 0, 0) ) {
        uint numStateNames;
        if ( numStateNames > 0 ) {
            struct {
                STRING name;
                uint index;
            } stateName[numStateNames] <optimize=false>;
        }

        ubyte flags;
    }
} NiPhysXPropDesc <name="NiPhysXPropDesc">;

// Hack for Empire Earth III 20.2.0.8 differences from norm
local byte EE3 <hidden=true> = 0;
if ( Memcmp(ext, ".nifcache", 9) == 0 )
    EE3 = 1;

typedef struct {
    NiObjectNET base;
    NiTransform sceneTransform;
    float scalePtoW;
    if ( version < Version(20, 3, 0, 2) ) {
        RefArray sources( "PhysX Source" ); // NiPhysXSrc
        RefArray dests( "PhysX Dest" ); // NiPhysXDest
        
        // Seems to be > instead of >= for EE3
        if ( version >= Version(20, 2, 0, 8) && !EE3 ) {
            float timeStep;
            bool keepMeshesBackwardsCompatible;
        }
    } else {
        RefArray props( "PhysX Prop" ); // NiPhysXProp
        RefArray sources( "PhysX Source" ); // NiPhysXSrc
        RefArray dests( "PhysX Dest" ); // NiPhysXDest
    
        if ( version >= Version(20, 4, 0, 0) )
            RefArray modifiedMeshes( "Modified Mesh" ); // NiMesh
        
        float timeStep;
        
        if ( version >= Version(20, 3, 0, 9) ) {
            uint numSubSteps;
            uint maxSubSteps;
        }
    }
    
    Ref snapshot; // NiPhysXSceneDesc
    ushort flags;
} NiPhysXScene <name="NiPhysXScene">;


typedef enum <uint> {
    NX_BROADPHASE_QUADRATIC = 0,
    NX_BROADPHASE_FULL,
    NX_BROADPHASE_COHERENT
} NiSceneDescNxBroadPhaseType;

typedef enum <uint> {
    NX_HW_RB_PIPELINE_HLP_ONLY = 0,
    NX_HW_PIPELINE_FULL,
    NX_HW_PIPELINE_DEBUG
} NiSceneDescNxHwPipelineSpec;

typedef enum <uint> {
    NX_HW_SCENE_TYPE_RB = 0,
    NX_HW_SCENE_TYPE_FLUID,
    NX_HW_SCENE_TYPE_FLUID_SOFTWARE,
    NX_HW_SCENE_TYPE_CLOTH
} NiSceneDescNxHwSceneType;

typedef enum <uint> {
    NX_TIMESTEP_FIXED = 0,
    NX_TIMESTEP_VARIABLE
} NxTimeStepMethod;

typedef enum <uint> {
    NX_SIMULATION_SW = 0,
    NX_SIMULATION_HW
} NxSimulationType;

typedef enum <uint> {
    NX_BP_TYPE_SAP_SINGLE = 0,
    NX_BP_TYPE_SAP_MULTI
} NxBroadPhaseType;

typedef enum <uint> {
    NX_FILTEROP_AND = 0,
    NX_FILTEROP_OR,
    NX_FILTEROP_XOR,
    NX_FILTEROP_NAND,
    NX_FILTEROP_NOR,
    NX_FILTEROP_NXOR,
    NX_FILTEROP_SWAP_AND
} NxFilterOp;

typedef struct {
    NIOBJECT
    if ( version < Version(20, 2, 0, 8) )
        NiSceneDescNxBroadPhaseType broadPhaseType;
    Vec3 gravity;
    float maxTimestep;
    uint maxIter;
    NxTimeStepMethod timeStepMethod;
    bool hasBound;
    if ( hasBound ) {
        Vec3 maxBoundsMin;
        Vec3 maxBoundsMax;
    }
    bool hasLimits;
    if ( hasLimits ) {
        uint maxActors;
        uint maxBodies;
        uint maxStaticShapes;
        uint maxDynamicShapes;
        uint maxJoints;
    }
    NxSimulationType simType;
    
    if ( version < Version(20, 3, 0, 0) ) {
        NiSceneDescNxHwSceneType hwSceneType;
        NiSceneDescNxHwPipelineSpec hwPipelineSpec;
    }

    bool groundPlane;
    bool boundsPlane;

    if ( version < Version(20, 2, 0, 8) )
        bool collisionDetection;

    // Seems to be > instead of >= for EE3
    if ( version >= Version(20, 2, 0, 8) && !EE3  ) {
        uint flags;
        uint internalThreadCount;
        uint backgroundThreadCount;
        uint threadMask;
    }

    if ( version >= Version(20, 5, 0, 3) )
        uint backgroundThreadPriority;

    // Seems to be > instead of >= for EE3
    if ( version >= Version(20, 2, 0, 8) && !EE3 )
        uint backgroundThreadMask;

    if ( version >= Version(20, 3, 0, 1) && version < Version(20, 3, 0, 6) )
        uint numHWScenes;

    if ( version >= Version(20, 3, 0, 1) ) {
        uint simThreadStackSize;
        uint simThreadPriority;
        uint workerThreadStackSize;
        uint workerThreadPriority;
        uint upAxis;
        uint subdivisionLevel;
        uint staticStructure;
        uint dynamicStructure;
    }

    if ( version >= Version(20, 5, 0, 3) )
        uint dynamicTreeRebuildRateHint;

    if ( version >= Version(20, 4, 0, 0) ) {
        NxBroadPhaseType broadPhaseType;
        uint gridCellsX;
        uint gricCellsY;
    }

    if ( version < Version(20, 3, 0, 2) ) {
        RefArray actors( "Actor" ); // NiPhysXActorDesc
        RefArray joints( "Joint" ); // NiPhysXJointDesc
        
        uint numMaterials;
        if ( numMaterials > 0 ) {
            struct {
                ushort key;
                Ref material; // NiPhysXMaterialDesc
            } materials[numMaterials];
        }
    }

    bool groupCollisionFlags[32*32];
    NxFilterOp filterOps[3];
    uint filterConstants[8];
    bool filter;

    if ( version < Version(20, 3, 0, 2) )
        uint numStates;
    
    if ( version >= Version(20, 3, 0, 6) ) {
        uint numCompartments;
        if ( numCompartments > 0 ) {
            struct {
                uint ID;
                enum {
                    NX_SCT_RIGIDBODY,
                    NX_SCT_FLUID,
                    NX_SCT_CLOTH
                } compartmentType;
                uint deviceCode;
                float gridHashCellSize;
                uint gridHashTablePower;
            } compartment[numCompartments];
        }
    }
} NiPhysXSceneDesc <name="NiPhysXSceneDesc">;


typedef struct {
    NIOBJECT
    STRING actorName;
    uint numPoses;
    if ( numPoses > 0 )
        Matrix34 poses[numPoses];
    Ref bodyDesc; // NiPhysXBodyDesc
    float density;
    uint actorFlags;
    ushort actorGroup;
    if ( version >= Version(20, 4, 0, 0) ) {
        ushort dominanceGroup;
        uint contactReportFlags;
        ushort forceFieldMaterial;
    } else if ( version > Version(20, 3, 0, 0) && version < Version(20, 3, 0, 6) ) {
        uint dummy;
    }
    
    RefArray shapeDescs( "Shape Desc" ); // NiPhysXShapeDesc
    Ref actorParent; // NiPhysXActorDesc
    Ref source; // NiPhysXRigidBodySrc
    Ref dest; // NiPhysXRigidBodyDest
} NiPhysXActorDesc <name="NiPhysXActorDesc">;


typedef struct {
    NIOBJECT
    Matrix34 localPose;
    Vec3 spaceInertia;
    float mass;
    uint numVels;
    if ( numVels > 0 ) {
        struct {
            Vec3 linearVelocity;
            Vec3 angularVelocity;
            if ( version >= Version(30, 2, 0, 3) )
                bool sleep;
        } storedVels[numVels] <optimize=true>;
    }
    float wakeUpCounter;
    float linearDamping;
    float angularDamping;
    float maxAngularVelocity;
    float CCDMotionThreshold;
    uint flags;
    float sleepLinearVel;
    float sleepAngularVel;
    uint solverIterCount;
    if ( version >= Version(20, 3, 0, 0) ) {
        float sleepEnergyThreshold;
        float sleepDamping;
    }
    if ( version >= Version(20, 4, 0, 0) )
        float contactReportThreshold;
} NiPhysXBodyDesc <name="NiPhysXBodyDesc">;


// TODO: Cannot find any uses
typedef struct {
    NIOBJECT
    STRING name;
    Ref mesh; // NiPhysXMeshDesc
    if ( version < Version(20, 4, 0, 0) )
        Matrix34 pose;
    float thickness;
    if ( version >= Version(30, 1, 0, 3) )
        float selfCollisionThickness;
    float density;
    float bendingStiffness;
    float stretchingStiffness;
    float dampingCoefficient;
    if ( version >= Version(30, 1, 0, 3) )
        float hardStretchLimitationFactor;
    float friction;
    float pressure;
    float tearFactor;
    float collisionResponseCoefficient;
    float attachResponseCoefficient;
    float attachTearFactor;
    if ( version >= Version(20, 4, 0, 0) ) {
        float toFluidResponseCoeff;
        float fromFluidResponseCoeff;
        float minAdhereVelocity;
        float relativeGridSpacing;
    }
    uint solverIterations;
    if ( version >= Version(30, 1, 0, 3) )
        uint hierSolverIterations;
    Vec3 externalAcceleration;
    if ( version >= Version(20, 4, 0, 0) )
        float windAcceleration;
    float wakeUpCounter;
    float sleepLinearVelocity;
    ushort collisionGroup;
    uint collisionBits[4];
    if ( version >= Version(20, 4, 0, 0) )
        ushort forceFieldMaterial;
    uint flags;
    if ( version >= Version(30, 2, 0, 3) ) {
        ushort vertexMapSize;
        if ( vertexMapSize > 0 ) {
            ushort vertexMap[vertexMapSize] <optimize=false>;
        }
    }

    if ( version >= Version(20, 4, 0, 0) ) {
        uint numStates;
        if ( numStates > 0 ) {
            struct {
                Matrix34 pose;
                ushort numVertexPos;
                if ( numVertexPos > 0 ) {
                    Vec3 vertexPos[numVertexPos];
                }
                ushort numTearIndices;
                if ( numTearIndices > 0 ) {
                    ushort tearIndices[numTearIndices];
                    Vec3 tearSplitPlanes[numTearIndices];
                }
            } state[numStates] <optimize=false>;
        }
    }
    
    uint numAttachments;
    if ( numAttachments > 0 ) {
        struct {
            Ref shape; // NiPhysXShapeDesc
            uint vertexCount;
            if ( vertexCount == 0 ) {
                uint flags;
            } else {
                struct {
                    uint vertexID;
                    Vec3 position;
                    uint flags;
                } position[vertexCount];
            }
        } attachment[numAttachments] <optimize=false>;
    }

    Ref parentActor; // NiPhysXActorDesc
    if ( version < Version(20, 4, 0, 0) ) {
        Ref dest; // NiPhysXClothDest
    } else {
        Ref targetMesh; // NiMesh
    }
} NiPhysXClothDesc <name="NiPhysXClothDesc">;


typedef enum <uint> { 
    NX_JOINT_PRISMATIC,
    NX_JOINT_REVOLUTE,
    NX_JOINT_CYLINDRICAL,
    NX_JOINT_SPHERICAL,
    NX_JOINT_POINT_ON_LINE,
    NX_JOINT_POINT_IN_PLANE,
    NX_JOINT_DISTANCE,
    NX_JOINT_PULLEY,
    NX_JOINT_FIXED,
    NX_JOINT_D6
} NxJointType;

typedef enum <uint> {
    NX_D6JOINT_MOTION_LOCKED,
    NX_D6JOINT_MOTION_LIMITED,
    NX_D6JOINT_MOTION_FREE
} NxD6JointMotion;

typedef enum <uint> {
    NX_D6JOINT_DRIVE_POSITION = 1,
    NX_D6JOINT_DRIVE_VELOCITY
} NxD6JointDriveType;

typedef enum <uint> {
    NX_JPM_NONE,
    NX_JPM_POINT_MINDIST,
    NX_JPM_LINEAR_MINDIST
} NxJointProjectionMode;

typedef struct {
    Ref actor; // NiPhysXActorDesc
    Vec3 localNormal;
    Vec3 localAxis;
    Vec3 localAnchor;
} NiPhysXJointActor <size=40>;

typedef struct {
    float value;
    float restitution;
    float spring;
    float damping;
} NxJointLimitSoftDesc <size=16>;

typedef struct {
    NxD6JointDriveType driveType;
    float restitution;
    float spring;
    float damping;
} NxJointDriveDesc <size=16>;

typedef struct {
    NIOBJECT
    NxJointType jointType;
    STRING name;
    NiPhysXJointActor actors[2];
    float maxForce;
    float maxTorque;
    
    if ( version >= Version(20, 5, 0, 3) ) {
        float solverExtrapolationFactor;
        uint useAccelerationSpring;
    }

    uint jointFlags;

    Vec3 limitPoint;
    uint numLimits;
    if ( numLimits > 0 ) {
        struct {
            Vec3 limitPlaneNormal;
            float limitPlaneD;
            if ( version >= Version(20, 4, 0, 0) )
                float limitPlaneR;
        } limits[numLimits] <optimize=true>;
    }

} NiPhysXJointDesc <name="NiPhysXJointDesc", open=true>; // Abstract

typedef struct {
    NiPhysXJointDesc joint;
    NxD6JointMotion xMotion;
    NxD6JointMotion yMotion;
    NxD6JointMotion zMotion;
    NxD6JointMotion swing1Motion;
    NxD6JointMotion swing2Motion;
    NxD6JointMotion twistMotion;
    NxJointLimitSoftDesc linearLimit;
    NxJointLimitSoftDesc swing1Limit;
    NxJointLimitSoftDesc swing2Limit;
    NxJointLimitSoftDesc twistLLimit;
    NxJointLimitSoftDesc twistHLimit;
    NxJointDriveDesc xDrive;
    NxJointDriveDesc yDrive;
    NxJointDriveDesc zDrive;
    NxJointDriveDesc swingDrive;
    NxJointDriveDesc twistDrive;
    NxJointDriveDesc slerpDrive;
    Vec3 drivePosition;
    Quat driveOrientation;
    Vec3 driveLinearVelocity;
    Vec3 driveAngularVelocity;
    NxJointProjectionMode projectionMode;
    float projectionDistance;
    float projectionAngle;
    float gearRatio;
    uint flags;
} NiPhysXD6JointDesc <name="NiPhysXD6JointDesc">;


typedef struct {
    NIOBJECT
    ushort index;
    uint numStates;
    if ( numStates > 0 ) {
        struct {
            float dynamicFriction;
            float staticFriction;
            float restitution;
            float dynamicFrictionV;
            float staticFrictionV;
            Vec3 dirOfAnisotropy;
            uint flags;
            uint frictionCombineMode;
            uint restitutionCombineMode;
            if ( version <= Version(20, 2, 3, 0) ) {
                bool hasSpring;
                if ( hasSpring ) {
                    float spring;
                    float damper;
                    float targetValue;
                }
            }
        } materialDescs[numStates] <optimize=false>;
    }
} NiPhysXMaterialDesc <name="NiPhysXMaterialDesc">;


typedef struct {
    NIOBJECT
    if ( version < Version(20, 3, 0, 5) )
        bool isConvex;
    STRING name;
    BinaryData meshData;
    if ( version >= Version(20, 3, 0, 5) && version < Version(30, 2, 0, 3)  ) {
        ushort meshSize;
        ushort meshData[meshSize] <optimize=false>;
    }
    uint meshFlags;
    if ( version >= Version(20, 3, 0, 1) )
        uint meshPagingMode;
    if ( version >= Version(20, 3, 0, 2) && version < Version(20, 3, 0, 5) )
        bool isHardware;
    else if ( version >= Version(20, 3, 0, 5) )
        ubyte flags;

} NiPhysXMeshDesc <name="NiPhysXMeshDesc">;


typedef enum <uint> {
    NX_SHAPE_PLANE,
    NX_SHAPE_SPHERE,
    NX_SHAPE_BOX,
    NX_SHAPE_CAPSULE,
    NX_SHAPE_WHEEL,
    NX_SHAPE_CONVEX,
    NX_SHAPE_MESH,
    NX_SHAPE_HEIGHTFIELD,
    NX_SHAPE_RAW_MESH,
    NX_SHAPE_COMPOUND
} NxShapeType;

typedef struct {
    NIOBJECT
    NxShapeType shapeType;
    Matrix34 localPose;
    uint shapeFlags;
    ushort collisionGroup;
    ushort materialIndex;
    float density;
    float mass;
    float skinWidth;
    STRING name;
    if ( version >= Version(20, 4, 0, 0) )
        uint nonInteractingCompartmentTypes;
    uint collisionBits[4];

    switch ( shapeType )
    {
        case NX_SHAPE_PLANE:
            float val1;
            Vec3 point1;
            break;
        case NX_SHAPE_SPHERE:
            float val1;
            break;
        case NX_SHAPE_BOX:
            Vec3 point1;
            break;
        case NX_SHAPE_CAPSULE:
            float val1;
            float val2;
            uint flags;
            break;
        case NX_SHAPE_CONVEX:
        case NX_SHAPE_MESH:
            Ref shape; // NiPhysXMeshDesc
            break;
    }
    
} NiPhysXShapeDesc <name="NiPhysXShapeDesc">;


typedef struct {
    NIOBJECT
    bool active;
    bool interp;
} NiPhysXDest <name="NiPhysXDest", open=true, size=2>; // Abstract

typedef struct {
    NiPhysXDest base;
} NiPhysXRigidBodyDest <name="NiPhysXRigidBodyDest", open=true, size=2>; // Abstract

typedef struct {
    NiPhysXRigidBodyDest base;
    Ref target; // NiAVobject
} NiPhysXTransformDest <name="NiPhysXTransformDest", size=6>;

typedef struct {
    NIOBJECT
    bool active;
    bool interp;
} NiPhysXSrc <name="NiPhysXSrc", open=true, size=2>; // Abstract

typedef struct {
    NiPhysXSrc base;
    Ref source; // NiAVObject
} NiPhysXRigidBodySrc <name="NiPhysXRigidBodySrc", size=6>;

typedef NiPhysXRigidBodySrc NiPhysXKinematicSrc <name="NiPhysXKinematicSrc", size=6>;
typedef NiPhysXRigidBodySrc NiPhysXDynamicSrc <name="NiPhysXDynamicSrc", size=6>;


// NiPSParticleSystem

typedef struct {
    NiPSParticleSystem base;
    Ref prop; // NiPhysXPSParticleSystemProp
    Ref dest; // NiPhysXPSParticleSystemDest
    Ref scene; // NiPhysXScene
    byte flags;
    uint defaultActorPoolSize;
    uint generationPoolSize;
    Vec3 actorPoolCenter;
    Vec3 actorPoolDimensions;
    Ref actor; // NiPhysXActorDesc
} NiPhysXPSParticleSystem <name="NiPhysXPSParticleSystem">;

typedef struct {
    NiPhysXProp base;
    RefArray systems( "Systems" ); // NiPhysXPSParticleSystem
} NiPhysXPSParticleSystemProp <name="NiPhysXPSParticleSystemProp">;

typedef struct {
    NiPhysXDest base;
    Ref target; // NiPSParticleSystem
} NiPhysXPSParticleSystemDest <name="NiPhysXPSParticleSystemDest">;

typedef NiPSSimulator NiPhysXPSSimulator <name="NiPhysXPSSimulator">;
typedef NiPSSimulatorStep NiPhysXPSSimulatorInitialStep <name="NiPhysXPSSimulatorInitialStep">;
typedef NiPSSimulatorStep NiPhysXPSSimulatorFinalStep <name="NiPhysXPSSimulatorFinalStep">;
