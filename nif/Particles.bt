//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: Particles.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    if ( stream >= 100 )
        BSGeometry base;
    else
        NiGeometry base;

    if ( stream >= 83 ) {
        ushort farBegin;
        ushort farEnd;
        ushort nearBegin;
        ushort nearEnd;

        if ( stream > 83 )
            Ref data; // NiPSysData
    }

    bool isWorldSpace;
    uint numModifiers;
    if ( numModifiers > 0 )
        Ref modifier[numModifiers]; // NiPSysModifier
} NiParticleSys <name="NiParticleSystem">;

typedef NiParticleSys NiMeshParticleSys <name="NiMeshParticleSystem">;
typedef NiParticleSys BSStripParticleSys <name="BSStripParticleSystem">;

typedef struct {
    NiNode node <open=true>;
    ushort maxEmitterObjs;
    uint numParticleSys;
    if ( numParticleSys > 0 )
        Ref particleSys[numParticleSys];
} BSMasterParticleSystem <name="BSMasterParticleSystem">;

typedef struct {
    local bool IS_PSYS = true;
    NiGeometryData base;

    bool hasRadii;
    ushort numActiveVerts;
    bool hasSizes;
    bool hasRotations;
    bool hasRotationAngles;
    bool hasRotationAxes;
    bool hasTextureIndices; // NOT the bool for subtexoffsets
    
    local uint numOffsets = 0;
    if ( stream > 34 ) {
        uint numSubtexOffsets;
        numOffsets = numSubtexOffsets;
    } else {
        ubyte numSubtexOffsets;
        numOffsets = numSubtexOffsets;
    }

    if ( numOffsets > 0 )
        Vec4 subtexOffsets[numOffsets];

    if ( stream > 34 ) {
        float aspectRatio;
        // 0x1 = VelocityOrientation, 0x2 = InitialRotationFromVelocity, 0x100 = SpeedToAspectEnabled
        ushort aspectFlags;
        float speedToAspectAspect2;
        float speedToAspectSpeed1;
        float speedToAspectSpeed2;
    }
} NiParticlesData <open=true>;


typedef struct {
    NiParticlesData data;
    bool hasRotationSpeeds;
} NiPSysData <name="NiPSysData">;

// NiMeshPSysData
typedef struct {
    NiPSysData data <open=true>;
    uint defaultPoolSize; // Generally equal to data.numVerts
    bool fillPoolsOnLoad;
    uint numGenerations;
    if ( numGenerations > 0 )
        uint generationPoolSize[numGenerations];
    Ref node; // NiNode
} NiMeshPSysData <name="NiMeshPSysData">;

// BSStripPSysData
typedef struct {
    NiPSysData data;
    ushort maxPointCount;
    uint startCapSize;
    uint endCapSize;
    bool doZPrepass;
} BSStripPSysData <name="BSStripPSysData">;


// MODIFIERS

typedef enum <uint> {
    FORCE_PLANAR,
    FORCE_SPHERICAL,
    FORCE_UNKNOWN
} ForceType;

typedef struct {
    STRING name;
    uint order;
    Ref target;
    bool isActive;
} NiPSysModifier <open=true>; // Abstract

// NiPSysAgeDeathModifier
typedef struct {
    NiPSysModifier base;
    bool spawnOnDeath;
    Ref spawnModifier; // NiPSysSpawnModifier
} NiPSAgeDeathMod <name="NiPSysAgeDeathModifier">;

// NiPSysSpawnModifier
typedef struct {
    NiPSysModifier base;
    ushort numSpawnGenerations;
    float percentSpawned;
    ushort minSpawned;
    ushort maxSpawned;
    float spawnSpeedVariation;
    float spawnDirVariation;
    float lifeSpan;
    float lifeSpanVariation;
} NiPSSpawnMod <name="NiPSysSpawnModifier">;

// BSPSysSimpleColorModifier
typedef struct {
    NiPSysModifier base;
    float fadeInPercent;
    float fadeOutPercent;
    float color1EndPercent;
    float color2StartPercent;
    float color2EndPercent;
    float color3StartPercent;
    Color4 color[3];   
} BSPSSimpleColorMod <name="BSPSysSimpleColorModifier">;

// NiPSysRotationModifier
typedef struct {
    NiPSysModifier base;
    float initialSpeed;
    float initialSpeedVariation;
    float initialAngle;
    float initialAngelVariation;
    bool randomSpeedSign;
    bool randomInitialAxis;
    Vec3 initialAxis;
} NiPSRotationMod <name="NiPSysRotationModifier">;

// BSPSysScaleModifier
typedef struct {
    NiPSysModifier base;
    uint numScales;
    if ( numScales > 0 )
        float scale[numScales];
} BSPSScaleMod <name="BSPSysScaleModifier">;

// BSPSysLODModifier
typedef struct {
    NiPSysModifier base;
    Vec4 unk;
} BSPSLODMod <name="BSPSysLODModifier">;

// NiPSysGravityModifier
typedef struct {
    NiPSysModifier base;
    Ref gravityObj;
    Vec3 gravityAxis;
    float decay;
    float strength;
    ForceType forceType;
    float turbulence;
    float turbulenceScale;
    byte unk;
} NiPSGravityMod <name="NiPSysGravityModifier">;

// NiPSysDragModifier
typedef struct {
    NiPSysModifier base;
    Ref parent;
    Vec3 dragAxis;
    float percentage;
    float range;
    float rangeFalloff;
} NiPSDragMod <name="NiPSysDragModifier">;

// NiPSysPositionModifier
typedef NiPSysModifier NiPSPositionMod <name="NiPSysPositionModifier", open=false>;

// NiPSysBoundUpdateModifier
typedef struct {
    NiPSysModifier base;
    ushort updateSkip;
} NiPSBoundUpdateMod <name="NiPSysBoundUpdateModifier">;

// BSPSysSubTexModifier
typedef struct {
    NiPSysModifier base;
    float startFrame; // uint??
    float startFrameVariation;
    float endFrame;
    float loopStartFrame;
    float loopStartFrameVariation;
    float frameCount;
    float frameCountVariation;
} BSPSysSubTexMod <name="BSPSysSubTexModifier">;

typedef enum <uint> { DECAY_NONE, DECAY_LINEAR, DECAY_EXPONENTIAL } DecayType;
typedef enum <uint> { SPHERICAL_SYMMETRY, CYLINDRICAL_SYMMETRY, PLANAR_SYMMETRY } SymmetryType;

// NiPSysBombModifier
typedef struct {
    NiPSysModifier base;
    Ref bombNode; // NiNode
    Vec3 bombAxis;
    float decay;
    float deltaV;
    DecayType decayType;
    SymmetryType symmetryType;
} NiPSysBombMod <name="NiPSysBombModifier">;

// BSWindModifier
typedef struct {
    NiPSysModifier base;
    float strength;
} BSWindModifier <name="BSWindModifier">;

// BSPSysInheritVelocityModifier
typedef struct {
    NiPSysModifier base;
    Ref targetNode; // NiNode
    float chanceToInherit;
    float velocityMult;
    float velocityVar;
} BSPSInheritVelMod <name="BSPSysInheritVelocityModifier">;

// BSPSysHavokUpdateModifier
typedef struct {
    NiPSysModifier base;
    uint numNodes;
    if ( numNodes > 0 )
        Ref node[numNodes]; // NiNode
    Ref modifier; // NiPSysModifier
} BSPSHavokUpdateMod <name="BSPSysHavokUpdateModifier">;

// BSPSysRecycleBoundModifier
typedef struct {
    NiPSysModifier base;
    Vec3 boundOffset;
    Vec3 boundExtent;
    Ref targetNode; // NiNode
} BSPSRecycleBoundMod <name="BSPSysRecycleBoundModifier">;

// BSPSysStripUpdateModifier
typedef struct {
    NiPSysModifier base;
    float updateDeltaTime;
} BSPSStripUpdateMod <name="BSPSysStripUpdateModifier">;

// NiPSysColliderManager
typedef struct {
    NiPSysModifier base;
    Ref collider;
} NiPSysCollMgr <name="NiPSysColliderManager">;

// EMITTERS

typedef enum <uint> {
    VELOCITY_USE_NORMALS,
    VELOCITY_USE_RANDOM,
    VELOCITY_USE_DIRECTION
} VelocityType;

typedef enum <uint> {
    EMIT_FROM_VERTICES,
    EMIT_FROM_FACE_CENTER,
    EMIT_FROM_EDGE_CENTER,
    EMIT_FROM_FACE_SURFACE,
    EMIT_FROM_EDGE_SURFACE
} EmissionType;

typedef struct {
    NiPSysModifier base;
    float speed;
    float speedVariation;
    float declination;
    float declinationVariation;
    float planarAngle;
    float planarAngleVariation;
    Color4 color;
    float radius;
    float radiusVariation;
    float lifeSpan;
    float lifeSpanVariation;
} NiPSysEmitter <open=true>; // Abstract

typedef struct {
    NiPSysEmitter base;
    Ref emitterNode; // NiNode
} NiPSysVolumeEmitter <open=true>; // Abstract

typedef struct {
    NiPSysEmitter base;
    uint numMeshes;
    if ( numMeshes > 0 )
        Ref mesh[numMeshes];
    VelocityType velocityType;
    EmissionType emissionType;
    Vec3 emissionAxis;
} NiPSysMeshEmitter <name="NiPSysMeshEmitter">;

typedef struct {
    NiPSysVolumeEmitter base;
    float radius;
} NiPSysSphEmitter <name="NiPSysSphereEmitter">;

typedef struct {
    NiPSysVolumeEmitter base;
    float width;
    float height;
    float depth;
} NiPSysBoxEmitter <name="NiPSysBoxEmitter">;

typedef struct {
    NiPSysVolumeEmitter base;
    float radius;
    float height;
} NiPSysCylEmitter <name="NiPSysCylinderEmitter">;


// COLLIDERS

// NiPSysCollider
typedef struct {
    float bound;
    bool spawnOnCollide;
    bool dieOnCollide;
    Ref spawnModifier; // NiPSysSpawnModifier
    Ref parent;
    Ref nextCollider;
    Ref colliderNode; // NiNode
} NiPSysCollider <open=true>; // Abstract

typedef struct {
    NiPSysCollider base;
    float width;
    float height;
    Vec3 xAxis;
    Vec3 yAxis;
} NiPSysPlanarColl <name="NiPSysPlanarCollider">;

typedef struct {
    NiPSysCollider base;
    float radius;
} NiPSysSphColl <name="NiPSysSphericalCollider">;


// CONTROLLERS

// NiPSysModifierCtlr
typedef struct {
    NISINGLEINTERPCTLR controller;
    STRING modifier;
} NIPSYSMODCTLR <open=true>; // Abstract

typedef NIPSYSMODCTLR NIPSYSBOOLCTLR <name="NiPSysModifierCtlr", open=true>; // Abstract
typedef NIPSYSBOOLCTLR NiPSysActiveCtlr <name="NiPSysModifierActiveCtlr", open=false>;

typedef NIPSYSMODCTLR NIPSYSMODFLOATCTRLTR <name="NiPSysModifierFloatCtlr", open=true>; // Abstract
typedef NIPSYSMODFLOATCTRLTR NiPSysGravStrCtlr <name="NiPSysGravityStrengthCtlr", open=false>;
typedef NIPSYSMODFLOATCTRLTR NiPSysInitRotSpeedCtlr <name="NiPSysInitialRotSpeedCtlr", open=false>;
typedef NIPSYSMODFLOATCTRLTR NiPSEmitSpeedCtlr <name="NiPSysEmitterSpeedCtlr", open=false>;
typedef NIPSYSMODFLOATCTRLTR NiPSEmitLifeSpanCtlr <name="NiPSysEmitterLifeSpanCtlr", open=false>;
typedef NIPSYSMODFLOATCTRLTR NiPSEmitIRadiusCtlr <name="NiPSysEmitterInitialRadiusCtlr", open=false>;
typedef NIPSYSMODFLOATCTRLTR NiPSEmitPlanarAngleCtlr <name="NiPSysEmitterPlanarAngleCtlr", open=false>;
typedef NIPSYSMODFLOATCTRLTR NiPSEmitDeclinationCtlr <name="NiPSysEmitterDeclinationCtlr", open=false>;

typedef struct {
    NIPSYSMODCTLR controller;
    Ref visInterpolator;
} NiPSysEmitterCtlr <name="NiPSysEmitterCtlr">;

// BSPSysMultiTargetEmitterCtlr
typedef struct {
    NiPSysEmitterCtlr controller <open=true>;
    ushort maxEmitters;
    Ref masterParticleSystem; // BSMasterParticleSystem
} BSPSysMultiTargetEmitterCtlr <name="BSPSysMultiTargetEmitterCtlr">;

typedef NITIMECTLR NiPSysUpdateCtlr <name="NiPSysUpdateCtlr", open=false>;


// Legacy Particles

// MODIFIERS

// NiPSysGrowFadeModifier
typedef struct {
    NiPSysModifier base;
    float growTime;
    ushort growGeneration;
    float fadeTime;
    ushort fadeGeneration;
    if ( stream >= 34 )
        float baseScale;
} NiPSysGrowFadeMod <name="NiPSysGrowFadeModifier">;
