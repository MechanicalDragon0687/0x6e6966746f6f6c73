//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: Particles.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef NiGeometry NiParticles <name="NiParticles", open=false>;

typedef struct {
    if ( stream >= 100 )
        BSGeometry base;
    else
        NiGeometry base;

    if ( stream >= 83 ) {
        ushort farBegin;
        ushort farEnd;
        ushort nearBegin;
        ushort nearEnd;

        if ( stream > 83 )
            Ref data; // NiPSysData
    }

    bool isWorldSpace;
    RefArray modifiers( "Modifier" ); // NiPSysModifier
} NiParticleSys <name="NiParticleSystem">;

typedef NiParticleSys NiMeshParticleSys <name="NiMeshParticleSystem">;
typedef NiParticleSys BSStripParticleSys <name="BSStripParticleSystem">;

typedef struct {
    NiNode node <open=true>;
    ushort maxEmitterObjs;
    RefArray particleSys( "Particle System" ); // NiParticles
} BSMasterParticleSystem <name="BSMasterParticleSystem">;

typedef struct {
    if ( BS_202 )
        local bool IS_PSYS = true;
    NiGeometryData base;
    local ushort numVerts = base.numVerts;

    bool hasRadii;
    if ( !BS_202 && hasRadii && numVerts )
        float radii[numVerts];
    
    ushort numActiveVerts;
    bool hasSizes;
    if ( !BS_202 && hasSizes && numVerts )
        float sizes[numVerts];

    bool hasRotations;
    if ( !BS_202 && hasRotations && numVerts )
        Quat rotations[numVerts];

    if ( version >= Version(10, 3, 0, 5) && !WORLDSHIFT_10_4 ) {
        bool hasRotationAngles;
        if ( !BS_202 && hasRotationAngles && numVerts )
            float rotationAngles[numVerts];
        bool hasRotationAxes;
        if ( !BS_202 && hasRotationAxes && numVerts )
            Vec3 rotationAxes[numVerts];
    }

    if ( BS_202 ) {
        bool hasTextureIndices; // NOT the bool for subtexoffsets
        
        local uint numOffsets = 0;
        if ( stream > 34 ) {
            uint numSubtexOffsets;
            numOffsets = numSubtexOffsets;
        } else {
            ubyte numSubtexOffsets;
            numOffsets = numSubtexOffsets;
        }
    
        if ( numOffsets > 0 )
            Vec4 subtexOffsets[numOffsets];
    
        if ( stream > 34 ) {
            float aspectRatio;
            // 0x1 = VelocityOrientation, 0x2 = InitialRotationFromVelocity, 0x100 = SpeedToAspectEnabled
            ushort aspectFlags;
            float speedToAspectAspect2;
            float speedToAspectSpeed1;
            float speedToAspectSpeed2;
        }
    }

} NiParticlesData <open=true>;


typedef struct {
    NiParticlesData data;
    local ushort numVerts = data.base.numVerts;
    
    if ( !BS_202 && numVerts > 0 ) {
        struct {
            Vec3 velocity;
            if ( version < Version(10, 3, 0, 5) || WORLDSHIFT_10_4 )
                Vec3 rotationAxis;

            float age;
            float lifespan;
            float lastUpdate;
            ushort generation;
            ushort code;
        } particleInfo[numVerts] <OPTARRAY>;
    }

    if ( version >= Version(20, 0, 0, 2) ) {
        bool hasRotationSpeeds;
        if ( !BS_202 && hasRotationSpeeds && numVerts )
            float rotationSpeeds[numVerts];
    }

    if ( !BS_202 ) {
        ushort numAddedParticles;
        ushort addedParticlesBase;
    }
} NiPSysData <name="NiPSysData">;

// NiMeshPSysData
typedef struct {
    NiPSysData data <open=true>;
    if ( version > Version(10, 1, 0, 0) ) {
        uint defaultPoolSize; // Generally equal to data.numVerts
        bool fillPoolsOnLoad;
        uint numGenerations;
        if ( numGenerations > 0 )
            uint generationPoolSize[numGenerations];
    }
    Ref node; // NiNode
} NiMeshPSysData <name="NiMeshPSysData">;

// BSStripPSysData
typedef struct {
    NiPSysData data;
    ushort maxPointCount;
    uint startCapSize;
    uint endCapSize;
    bool doZPrepass;
} BSStripPSysData <name="BSStripPSysData">;

// DEPRECATED
// NiPSysEmitterCtlrData
typedef struct {
    NIOBJECT
    FloatKeyGrp birthRateKeys( "Birth Rate" );
    BoolKeyGrp activeEmitterKeys( "Active Emitter" );
} NiPSysEmitterCtlrData <name="NiPSysEmitterCtlrData">;

// MODIFIERS

typedef struct {
    NIOBJECT
    STRING name;
    uint order;
    Ref target;
    bool isActive;
} NiPSysModifier <open=true>; // Abstract

// NiPSysAgeDeathModifier
typedef struct {
    NiPSysModifier base;
    bool spawnOnDeath;
    Ref spawnModifier; // NiPSysSpawnModifier
} NiPSAgeDeathMod <name="NiPSysAgeDeathModifier">;

// NiPSysSpawnModifier
typedef struct {
    NiPSysModifier base;
    ushort numSpawnGenerations;
    float percentSpawned;
    ushort minSpawned;
    ushort maxSpawned;
    if ( WORLDSHIFT_ALL )
        uint unk; // Always 0x80000000?
    float spawnSpeedVariation;
    float spawnDirVariation;
    float lifeSpan;
    float lifeSpanVariation;
} NiPSSpawnMod <name="NiPSysSpawnModifier">;

// NiPSysColorModifier
typedef struct {
    NiPSysModifier base;
    Ref data; // NiColorData
} NiPSColorMod <name="NiPSysColorModifier">;

// BSPSysSimpleColorModifier
typedef struct {
    NiPSysModifier base;
    float fadeInPercent;
    float fadeOutPercent;
    float color1EndPercent;
    float color2StartPercent;
    float color2EndPercent;
    float color3StartPercent;
    Color4 color1;
    Color4 color2;
    Color4 color3;   
} BSPSSimpleColorMod <name="BSPSysSimpleColorModifier">;

// NiPSysRotationModifier
typedef struct {
    NiPSysModifier base;
    float initialSpeed;
    if ( version >= Version(20, 0, 0, 2) ) {
        float initialSpeedVariation;
        float initialAngle;
        float initialAngleVariation;
        bool randomSpeedSign;
    }
    bool randomInitialAxis;
    Vec3 initialAxis;
} NiPSRotationMod <name="NiPSysRotationModifier">;

// BSPSysScaleModifier
typedef struct {
    NiPSysModifier base;
    uint numScales;
    if ( numScales > 0 )
        float scale[numScales];
} BSPSScaleMod <name="BSPSysScaleModifier">;

// BSPSysLODModifier
typedef struct {
    NiPSysModifier base;
    float LODBeginDistance;
    float LODEndDistance;
    float unknownFadeFactor1;
    float unknownFadeFactor2;
} BSPSLODMod <name="BSPSysLODModifier">;

// NiPSysGravityModifier
typedef struct {
    NiPSysModifier base;
    Ref gravityObj;
    Vec3 gravityAxis;
    float decay;
    float strength;
    ForceType forceType;
    float turbulence;
    float turbulenceScale;

    if ( stream > 16 )
        bool worldAligned;
} NiPSGravityMod <name="NiPSysGravityModifier">;

// NiPSysDragModifier
typedef struct {
    NiPSysModifier base;
    Ref parent;
    Vec3 dragAxis;
    float percentage;
    float range;
    float rangeFalloff;
} NiPSDragMod <name="NiPSysDragModifier">;

// NiPSysPositionModifier
typedef NiPSysModifier NiPSPositionMod <name="NiPSysPositionModifier", open=false>;

// NiPSysMeshUpdateModifier
typedef struct {
    NiPSysModifier base;
    RefArray meshes( "Mesh" ); // NiAVObject
} NiPSysMeshUpdateMod <name="NiPSysMeshUpdateModifier">;

// NiPSysBoundUpdateModifier
typedef struct {
    NiPSysModifier base;
    ushort updateSkip;
} NiPSBoundUpdateMod <name="NiPSysBoundUpdateModifier">;

// BSPSysSubTexModifier
typedef struct {
    NiPSysModifier base;
    float startFrame;
    float startFrameVariation;
    float endFrame;
    float loopStartFrame;
    float loopStartFrameVariation;
    float frameCount;
    float frameCountVariation;
} BSPSysSubTexMod <name="BSPSysSubTexModifier">;

// NiPSysBombModifier
typedef struct {
    NiPSysModifier base;
    Ref bombNode; // NiNode
    Vec3 bombAxis;
    float decay;
    float deltaV;
    DecayType decayType;
    SymmType symmetryType;
} NiPSysBombMod <name="NiPSysBombModifier">;

// BSWindModifier
typedef struct {
    NiPSysModifier base;
    float strength;
} BSWindModifier <name="BSWindModifier">;

// BSParentVelocityModifier
typedef struct {
    NiPSysModifier base;
    float percentage;
} BSParentVelocityMod <name="BSParentVelocityModifier">;

// BSPSysInheritVelocityModifier
typedef struct {
    NiPSysModifier base;
    Ref targetNode; // NiNode
    float chanceToInherit;
    float velocityMult;
    float velocityVar;
} BSPSInheritVelMod <name="BSPSysInheritVelocityModifier">;

// BSPSysHavokUpdateModifier
typedef struct {
    NiPSysModifier base;
    RefArray nodes( "Node" ); // NiNode
    Ref modifier; // NiPSysModifier
} BSPSHavokUpdateMod <name="BSPSysHavokUpdateModifier">;

// BSPSysRecycleBoundModifier
typedef struct {
    NiPSysModifier base;
    Vec3 boundOffset;
    Vec3 boundExtent;
    Ref targetNode; // NiNode
} BSPSRecycleBoundMod <name="BSPSysRecycleBoundModifier">;

// BSPSysStripUpdateModifier
typedef struct {
    NiPSysModifier base;
    float updateDeltaTime;
} BSPSStripUpdateMod <name="BSPSysStripUpdateModifier">;

// NiPSysColliderManager
typedef struct {
    NiPSysModifier base;
    Ref collider;
} NiPSysColliderMgr <name="NiPSysColliderManager">;

// EMITTERS

typedef struct {
    NiPSysModifier base;
    float speed;
    float speedVariation;
    float declination;
    float declinationVariation;
    float planarAngle;
    float planarAngleVariation;
    Color4 color;
    float radius;
    if ( version >= Version(10, 3, 0, 2) )
        float radiusVariation;
    float lifeSpan;
    float lifeSpanVariation;
} NiPSysEmitter <open=true>; // Abstract

typedef struct {
    NiPSysEmitter base;
    Ref emitterNode; // NiNode
} NiPSysVolumeEmitter <open=true>; // Abstract

typedef struct {
    NiPSysEmitter base;
    RefArray mesh( "Mesh" );
    InitialVelocityType initialVelocityType;
    MeshEmissionType meshEmissionType;
    Vec3 emissionAxis;
} NiPSysMeshEmitter <name="NiPSysMeshEmitter">;

typedef struct {
    NiPSysVolumeEmitter base;
    float radius;
} NiPSysSphereEmitter <name="NiPSysSphereEmitter">;

typedef struct {
    NiPSysVolumeEmitter base;
    float width;
    float height;
    float depth;
} NiPSysBoxEmitter <name="NiPSysBoxEmitter">;

typedef struct {
    NiPSysVolumeEmitter base;
    float radius;
    float height;
} NiPSysCylinderEmitter <name="NiPSysCylinderEmitter">;

// BETHESDA

typedef NiPSysVolumeEmitter BSPSysArrayEmitter <name="BSPSysArrayEmitter", open=false>;


// COLLIDERS

// NiPSysCollider
typedef struct {
    NIOBJECT
    float bounce;
    bool spawnOnCollide;
    bool dieOnCollide;
    Ref spawnModifier; // NiPSysSpawnModifier
    Ref manager;       // NiPSysColliderManager
    Ref nextCollider;  // NiPSysCollider
    Ref colliderNode;  // NiNode
} NiPSysCollider <open=true>; // Abstract

typedef struct {
    NiPSysCollider base;
    float width;
    float height;
    Vec3 xAxis;
    Vec3 yAxis;
} NiPSysPlanarColl <name="NiPSysPlanarCollider">;

typedef struct {
    NiPSysCollider base;
    float radius;
} NiPSysSphColl <name="NiPSysSphericalCollider">;


// CONTROLLERS

// NiPSysModifierCtlr
typedef struct {
    NiSingleInterpController controller;
    STRING modifier;
} NiPSysModifierCtlr <name="NiPSysModifierCtlr", open=true>; // Abstract

typedef struct {
    NiPSysModifierCtlr controller;
    DATAREF_10_1
} NiPSysModifierBoolCtlr <name="NiPSysModifierBoolCtlr", open=true>; // Abstract
typedef NiPSysModifierBoolCtlr NiPSysActiveCtlr <name="NiPSysModifierActiveCtlr", open=false>;

typedef struct {
    NiPSysModifierCtlr controller;
    DATAREF_10_1
} NiPSysModifierFloatCtlr <name="NiPSysModifierFloatCtlr", open=true>; // Abstract

typedef NiPSysModifierFloatCtlr NiPSysGravStrCtlr <name="NiPSysGravityStrengthCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSysInitRotSpeedCtlr <name="NiPSysInitialRotSpeedCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSEmitSpeedCtlr <name="NiPSysEmitterSpeedCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSEmitLifeSpanCtlr <name="NiPSysEmitterLifeSpanCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSEmitIRadiusCtlr <name="NiPSysEmitterInitialRadiusCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSEmitPlanarAngleCtlr <name="NiPSysEmitterPlanarAngleCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSEmitPlanarAngleVarCtlr <name="NiPSysEmitterPlanarAngleVarCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSEmitDeclinationCtlr <name="NiPSysEmitterDeclinationCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSEmitDeclinationVarCtlr <name="NiPSysEmitterDeclinationVarCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSysInitialRotSpeedCtlr <name="NiPSysInitialRotSpeedCtlr", open=false>;
typedef NiPSysModifierFloatCtlr NiPSysInitialRotSpeedVarCtlr <name="NiPSysInitialRotSpeedVarCtlr", open=false>;
typedef NiTimeController NiPSysResetOnLoopCtlr <name="NiPSysResetOnLoopCtlr", open=false>;

typedef struct {
    NiPSysModifierCtlr controller;
    if ( version < Version(10, 1, 0, 104) )
        Ref data;
    else
        Ref interpolator; // NiInterpolator
} NiPSysEmitterCtlr <name="NiPSysEmitterCtlr">;

// BSPSysMultiTargetEmitterCtlr
typedef struct {
    NiPSysEmitterCtlr controller <open=true>;
    ushort maxEmitters;
    Ref masterParticleSystem; // BSMasterParticleSystem
} BSPSysMultiTargetEmitterCtlr <name="BSPSysMultiTargetEmitterCtlr">;

typedef NiTimeController NiPSysUpdateCtlr <name="NiPSysUpdateCtlr", open=false>;


// Legacy Particles

// MODIFIERS

// NiPSysGrowFadeModifier
typedef struct {
    NiPSysModifier base;
    float growTime;
    ushort growGeneration;
    float fadeTime;
    ushort fadeGeneration;
    if ( stream >= 34 )
        float baseScale;
} NiPSysGrowFadeMod <name="NiPSysGrowFadeModifier">;

// WorldShift
// NiPSysPartSpawnModifier
typedef struct {
    Assert( WORLDSHIFT_ALL, "NiPSysPartSpawnModifier unrecognized version." );
    NiPSysModifier base;
    float unkFloat1;
    float unkFloat2;
    Ref spawnModifier; // NiPSysSpawnModifier
} NiPSysPartSpawnMod <name="NiPSysPartSpawnModifier">;


// New Particles

typedef struct {
    NiMesh base <open=true>;
    Ref simulator; // NiPSSimulator
    Ref generator; // NiPSBoundUpdater
    RefArray emitters( "Emitter" ); // NiPSEmitter
    RefArray spawners( "Spawner" ); // NiPSSpawner
    Ref deathSpawner; // NiPSSpawner
    uint maxNumParticles;
    bool hasColors;
    bool hasRotations;
    bool hasRotationAxes;
    if ( version >= Version(20, 6, 1, 0) )
        bool hasAnimatedTextures;
    bool worldSpace;
    if ( version >= Version(20, 6, 1, 0) ) {
        AlignMethod normalMethod;
        Vec3 normalDir;
        AlignMethod upMethod;
        Vec3 upDir;
        Ref livingSpawner; // NiPSSpawner
        ubyte numSpawnRateKeys;
        if ( numSpawnRateKeys > 0 ) {
            struct {
                float value;
                float time;
            } spawnRateKey[numSpawnRateKeys];
        }
        bool preRPI;
    }
} NiPSParticleSystem <name="NiPSParticleSystem">;

typedef struct {
    NiPSParticleSystem base <open=true>;
    RefArray masterParticles( "Master Particle" ); // NiAVObject
    uint poolSize;
    bool autoFillPools;
} NiPSMeshParticleSystem <name="NiPSMeshParticleSystem">;


typedef struct {
    NIOBJECT
    Ref spawner; // NiPSSpawner
    enum <uint> {
        COLLIDER_PLANAR = 0, // NiPSPlanarCollider.
        COLLIDER_SPHERICAL // NiPSSphericalCollider.
    } colliderType;
    bool active;
} NiPSCollider <name="NiPSCollider", open=true>;

typedef struct {
    NiPSCollider base;
    float bounce;
    bool spawnOnCollide;
    bool dieOnCollide;
    float width;
    float height;
    Vec3 xAxis;
    Vec3 yAxis;
    Ref colliderObject; // NiAVObject
} NiPSPlanarCollider <name="NiPSPlanarCollider">;

typedef struct {
    NiPSCollider base;
    float bounce;
    bool spawnOnCollide;
    bool dieOnCollide;
    float radius;
    Ref colliderObject; // NiAVObject
} NiPSSphericalCollider <name="NiPSSphericalCollider">;


typedef struct {
    NIOBJECT
    STRING name;
    enum <uint> {
        FORCE_BOMB = 0, // NiPSBombForce
        FORCE_DRAG, // NiPSDragForce
        FORCE_AIR_FIELD, // NiPSAirFieldForce
        FORCE_DRAG_FIELD, // NiPSDragFieldForce
        FORCE_GRAVITY_FIELD, // NiPSGravityFieldForce
        FORCE_RADIAL_FIELD, // NiPSRadialFieldForce
        FORCE_TURBULENCE_FIELD, // NiPSTurbulenceFieldForce
        FORCE_VORTEX_FIELD, // NiPSVortexFieldForce
        FORCE_GRAVITY // NiPSGravityForce
    } forceType;
    bool active;
} NiPSForce <name="NiPSForce", open=true>;

typedef struct {
    NiPSForce base;
    Vec3 bombAxis;
    float decay;
    float deltaV;
    DecayType decayType;
    SymmType symmType;
    Ref bombObject; // NiAVObject
} NiPSBombForce <name="NiPSBombForce">;

typedef struct {
    NiPSForce base;
    Vec3 dragAxis;
    float percentage;
    float range;
    float rangeFalloff;
    Ref dragObject; // NiAVObject
} NiPSDragForce <name="NiPSDragForce">;

typedef struct {
    NiPSForce base;
    Vec3 gravityAxis;
    float decay;
    float strength;
    ForceType forceType;
    float turbulence;
    float turbulenceScale;
    Ref gravityObject; // NiAVObject
} NiPSGravityForce <name="NiPSGravityForce">;


typedef struct {
    NIOBJECT
    STRING name;
    float speed;
    float speedVar;
    if ( version >= Version(20, 6, 1, 0) )
        float speedFlipRatio;
    float declination;
    float declinationVar;
    float planarAngle;
    float planarAngleVar;
    if ( version < Version(20, 6, 1, 0) )
        ByteColor4 color;
    float size;
    float sizeVar;
    float lifespan;
    float lifespanVar;
    float rotAngle;
    float rotAngleVar;
    float rotSpeed;
    float rotSpeedVar;
    Vec3 rotAxis;
    bool randomRotSpeedSign;
    bool randomRotAxis;
} NiPSEmitter <name="NiPSEmitter", open=true>; // Abstract

typedef struct {
    NiPSEmitter base;
    Ref emitterObject; // NiAVObject
} NiPSVolumeEmitter <name="NiPSVolumeEmitter", open=true>; // Abstract

typedef struct {
    NiPSVolumeEmitter base;
    float width;
    float height;
    float depth;
} NiPSBoxEmitter <name="NiPSBoxEmitter">;

typedef struct {
    NiPSVolumeEmitter base;
    float radius;
} NiPSSphereEmitter <name="NiPSSphereEmitter">;

typedef struct {
    NiPSVolumeEmitter base;
    float radius;
    float height;
} NiPSCylinderEmitter <name="NiPSCylinderEmitter">;

typedef struct {
    NiPSEmitter base;
    RefArray meshEmitters( "Mesh Emitter" ); // NiMesh Ptr
    if ( version < Version(20, 6, 1, 0) )
        Vec3 emitAxis;
    if ( version >= Version(20, 6, 1, 0) )
        Ref emitterObject; // NiAVObject
    MeshEmissionType meshEmissionType;
    InitialVelocityType initialVelocityType;
} NiPSMeshEmitter <name="NiPSMeshEmitter">;


typedef struct {
    NiSingleInterpController base;
    STRING emitterName;
} NiPSEmitterCtlr <name="NiPSEmitterCtlr", open=true>; // Abstract

typedef NiPSEmitterCtlr NiPSEmitterFloatCtlr <name="NiPSEmitterFloatCtlr">; // Abstract

typedef struct {
    NiPSEmitterCtlr base;
    Ref emitterActiveInterpolator;
} NiPSEmitParticlesCtlr <name="NiPSEmitParticlesCtlr">;

typedef struct {
    NiSingleInterpController base;
    STRING forceName;
} NiPSForceCtlr <name="NiPSForceCtlr">; // Abstract

typedef NiPSForceCtlr NiPSForceBoolCtlr <name="NiPSForceBoolCtlr">;
typedef NiPSForceCtlr NiPSForceFloatCtlr <name="NiPSForceFloatCtlr">;
typedef NiPSForceBoolCtlr NiPSForceActiveCtlr <name="NiPSForceActiveCtlr">;
typedef NiPSForceFloatCtlr NiPSGravityStrengthCtlr <name="NiPSGravityStrengthCtlr">;

typedef NiPSEmitterFloatCtlr NiPSEmitterSpeedCtlr <name="NiPSEmitterSpeedCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterRadiusCtlr <name="NiPSEmitterRadiusCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterDeclinationCtlr <name="NiPSEmitterDeclinationCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterDeclinationVarCtlr <name="NiPSEmitterDeclinationVarCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterPlanarAngleCtlr <name="NiPSEmitterPlanarAngleCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterPlanarAngleVarCtlr <name="NiPSEmitterPlanarAngleVarCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterRotAngleCtlr <name="NiPSEmitterRotAngleCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterRotAngleVarCtlr <name="NiPSEmitterRotAngleVarCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterRotSpeedCtlr <name="NiPSEmitterRotSpeedCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterRotSpeedVarCtlr <name="NiPSEmitterRotSpeedVarCtlr">;
typedef NiPSEmitterFloatCtlr NiPSEmitterLifeSpanCtlr <name="NiPSEmitterLifeSpanCtlr">;
typedef NiTimeController NiPSResetOnLoopCtlr <name="NiPSResetOnLoopCtlr">;

typedef struct {
    NiMeshModifier base;
    RefArray simulatorSteps( "Simulator Step" ); // NiPSSimulatorStep
} NiPSSimulator <name="NiPSSimulator">;

typedef struct {
    NIOBJECT
} NiPSSimulatorStep <name="NiPSSimulatorStep", open=true>; // Abstract

typedef enum <uint> {
    PSKERNELLOOP_CLAMP_BIRTH = 0,
    PSKERNELLOOP_CLAMP_DEATH = 1,
    PSKERNELLOOP_AGESCALE = 2,
    PSKERNELLOOP_LOOP = 3,
    PSKERNELLOOP_REFLECT = 4
} PSLoopBehavior;

typedef struct {
    NiPSSimulatorStep base;
    if ( version < Version(20, 6, 1, 0) ) {
        ubyte numColorKeys;
        if ( numColorKeys > 0 ) {
            struct {
                float time;
                ByteColor4 color;
            } colorKey[numColorKeys];
        }
    } else {
        ubyte numSizeKeys;
        if ( numSizeKeys > 0 ) {
            struct {
                float value;
                float time;
            } sizeKey[numSizeKeys];
        }
        PSLoopBehavior sizeLoopBehavior;

        ubyte numColorKeys;
        if ( numColorKeys > 0 ) {
            struct {
                ByteColor4 color;
                float time;
            } colorKey[numColorKeys];
        }
        PSLoopBehavior colorLoopBehavior;

        ubyte numRotationKeys;
        if ( numRotationKeys > 0 ) {
            struct {
                float value;
                float time;
            } rotationKey[numRotationKeys];
        }
        PSLoopBehavior rotationLoopBehavior;
    }
    float growTime;
    float shrinkTime;
    ushort growGeneration;
    ushort shrinkGeneration;
} NiPSSimulatorGeneralStep <name="NiPSSimulatorGeneralStep">;

typedef struct {
    NiPSSimulatorStep base;
    RefArray forces( "Force" ); // NiPSForce
} NiPSSimulatorForcesStep <name="NiPSSimulatorForcesStep">;

typedef struct {
    NiPSSimulatorStep base;
    RefArray colliders( "Collider" ); // NiPSCollider
} NiPSSimulatorCollidersStep <name="NiPSSimulatorCollidersStep">;

typedef struct {
    NiPSSimulatorStep base;
} NiPSSimulatorFinalStep <name="NiPSSimulatorFinalStep">;

typedef struct {
    NiPSSimulatorStep base;
    ubyte numRotationKeys;
    if ( numRotationKeys > 0 ) {
        struct {
            Quat rotation;
            float time;
        } rotationKey[numRotationKeys];
    }
    PSLoopBehavior rotationLoopBehavior;
} NiPSSimulatorMeshAlignStep <name="NiPSSimulatorMeshAlignStep">;

typedef struct {
    NiMeshModifier base;
} NiPSFacingQuadGenerator <name="NiPSFacingQuadGenerator">;

typedef struct {
    NiMeshModifier base;
    float scaleAmountU;
    float scaleLimitU;
    float scaleRestU;
    float scaleAmountV;
    float scaleLimitV;
    float scaleRestV;
    float centerU;
    float centerV;
    bool UVScrolling;
    ushort numFramesAcross;
    ushort numFramesDown;
    bool pingPong;
    ushort initialFrame;
    float initialFrameVariation;
    ushort numFrames;
    float numFramesVariation;
    float initialTime;
    float finalTime;
} NiPSAlignedQuadGenerator <name="NiPSAlignedQuadGenerator">;

typedef struct {
    NIOBJECT
    ushort updateSkip;
} NiPSBoundUpdater <name="NiPSBoundUpdater">;
