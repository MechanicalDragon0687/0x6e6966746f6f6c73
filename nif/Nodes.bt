//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Nodes.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NiNode/BSFadeNode
typedef struct { 
    NiAVObject base;
#ifdef LEGACY_SUPPORT
    if ( version <= V2_3 ) {
        uint unkInts[2];
        byte unkByte;
    }
#endif
    RefArray children( "Child" ); // NiAVObject
    if ( file.header.stream < 130 )
        RefArray effect( "Effect" ); // NiDynamicEffect

} NiNode <name="NiNode">; // END

typedef NiNode BSFadeNode <name="BSFadeNode">;
typedef NiNode BSLeafAnimNode <name="BSLeafAnimNode">;

// BSTreeNode
typedef struct {
    NiNode node <open=true>;
    RefArray bones1( "Bone" );
    RefArray bones2( "Bone" );
} BSTreeNode <name="BSTreeNode">;

// NiSwitchNode
typedef struct {
    NiNode node <open=true>;
    if ( version >= Version(10, 1, 0, 0) )
        NiSwitchFlags flags;
    uint index;
} NiSwitchNode <name="NiSwitchNode">;

typedef struct {
    NiSwitchNode node <open=true>;
    Ref data; // NiLODData
} NiLODNode <name="NiLODNode">;

typedef struct {
    NIOBJECT
    Vec3 center;
    uint numRanges;
    if ( numRanges > 0 ) {
        struct {
            float near;
            float far;
        } ranges[numRanges];
    }
} NiRangeLODData <name="NiRangeLODData">;

// NiBillboardNode
typedef struct {
    NiNode node <open=true>;
    if ( version >= Version(10, 1, 0, 0) )
        BillboardMode mode;
} NiBBNode <name="NiBillboardNode">;

// NiSortAdjustNode
typedef struct {
    NiNode node <open=true>;
    enum <uint> {
        SORTING_INHERIT,
        SORTING_OFF
    } sortingMode;
    if ( version < Version(20, 0, 0, 4) )
        Ref accumulator; // NiAccumulator
} NiSortAdjustNode <name="NiSortAdjustNode">;

// BSOrderedNode
typedef struct {
    NiNode node <open=true>;
    Vec4 alphaSortBound;
    bool isStaticBound;
} BSOrderedNode <name="BSOrderedNode">;

// BSMultiBoundNode
typedef struct {
    NiNode node <open=true>;
    Ref multiBound;
    if ( stream >= 83 )
        BSCPCullingType cullingMode;
} BSMultiBoundNode <name="BSMultiBoundNode">;

// BSValueNode
typedef struct {
    NiNode node <open=true>;
    uint value;
    BSValueNodeFlags flags;
} BSValueNode <name="BSValueNode">;

// BSBlastNode / BSDamageStage
typedef struct {
    NiNode node <open=true>;
    byte min;
    byte max;
    byte current;
} BSRangeNode <name="BSRangeNode">;

typedef BSRangeNode BSDebrisNode <name="BSDebrisNode">;
typedef BSRangeNode BSBlastNode <name="BSBlastNode">;
typedef BSBlastNode BSDamageStage <name="BSDamageStage">;

// NiRoom/NiRoomGroup
typedef struct {
    NiNode node <open=true>;
    if ( version > Version(3, 3, 0, 13) ) { // UNVERIFIED MIN
        uint numWalls;
        if ( numWalls > 0 )
            NiPlane wall[numWalls];
    } else {
        RefArray walls( "Wall" ); // NiWall
    }

    RefArray inPortals( "In Portal" ); // NiPortal
    RefArray outPortals( "Out Portal" ); // NiPortal
    RefArray fixtures( "Fixture" ); // NiAVObject
} NiRoom <name="NiRoom">;

typedef struct {
    NiNode node <open=true>;
    Ref shell; // NiAVObject
    RefArray rooms( "Room" ); // NiRoom
} NiRoomGroup <name="NiRoomGroup">;
