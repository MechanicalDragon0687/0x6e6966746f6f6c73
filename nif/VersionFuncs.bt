//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: VersionFuncs.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define GAMEBRYO   "Gamebryo File Format"
#define NETIMMERSE "NetImmerse File Format"
#define NDS        "NDSNIF....@....@...."
#define VERSTR     ", Version "

#define IS_GAMEBRYO   (Strstr( hdr, GAMEBRYO ) == 0)
#define IS_NETIMMERSE (Strstr( hdr, NETIMMERSE ) == 0)
#define IS_NDS        (Strstr( hdr, NDS ) == 0)

// NIF Header Versions
typedef enum <uint> {
    // NetImmerse
    V2_3        = 0x02030000,   //! NIF Version 2.3
    V3_0        = 0x03000000,   //! NIF Version 3.0
    V3_03       = 0x03000300,   //! NIF Version 3.03
    V3_1        = 0x03010000,   //! NIF Version 3.1
    V3_3_0_13   = 0x0303000D,   //! NIF Version 3.3.0.13
    V4_0_0_0    = 0x04000000,   //! NIF Version 4.0.0.0
    V4_0_0_2    = 0x04000002,   //! NIF Version 4.0.0.2
    V4_1_0_12   = 0x0401000C,   //! NIF Version 4.1.0.12
    V4_2_0_2    = 0x04020002,   //! NIF Version 4.2.0.2
    V4_2_1_0    = 0x04020100,   //! NIF Version 4.2.1.0
    V4_2_2_0    = 0x04020200,   //! NIF Version 4.2.2.0
    // First version to use block types in header
    V5_0_0_1    = 0x05000001,   //! NIF Version 5.0.0.1
    // Gamebryo 1.0
    // First version to include Group ID at start of NiObject
    V10_0_0_0   = 0x0A000000,   //! NIF Version 10.0.0.0
    V10_0_1_0   = 0x0A000100,   //! NIF Version 10.0.1.0
    V10_0_1_2   = 0x0A000102,   //! NIF Version 10.0.1.2
    V10_0_1_3   = 0x0A000103,   //! NIF Version 10.0.1.3
    V10_1_0_0   = 0x0A010000,   //! NIF Version 10.1.0.0
    V10_1_0_101 = 0x0A010065,   //! NIF Version 10.1.0.101
    V10_1_0_104 = 0x0A010068,   //! NIF Version 10.1.0.104
    V10_1_0_106 = 0x0A01006A,   //! NIF Version 10.1.0.106
    // Last version to include Group ID at start of NiObject
    V10_1_0_114 = 0x0A010072,   //! NIF Version 10.1.0.114
    V10_2_0_0   = 0x0A020000,   //! NIF Version 10.2.0.0
    V10_2_0_1   = 0x0A020001,   //! NIF Version 10.2.0.1 ]
    V10_3_0_1   = 0x0A030001,   //! NIF Version 10.3.0.1  ] - WorldShift
    V10_4_0_1   = 0x0A040001,   //! NIF Version 10.4.0.1 ]
    V20_0_0_4   = 0x14000004,   //! NIF Version 20.0.0.4
    V20_0_0_5   = 0x14000005,   //! NIF Version 20.0.0.5
    // First version to use string indices
    V20_1_0_1   = 0x14010001,   //! NIF Version 20.1.0.1
    V20_1_0_3   = 0x14010003,   //! NIF Version 20.1.0.3
    // First version to use block sizes
    V20_2_0_5   = 0x14020005,   //! NIF Version 20.2.0.5
    V20_2_0_7   = 0x14020007,   //! NIF Version 20.2.0.7
    V20_2_0_8   = 0x14020008,   //! NIF Version 20.2.0.8
    V20_3_0_1   = 0x14030001,   //! NIF Version 20.3.0.1
    V20_3_0_2   = 0x14030002,   //! NIF Version 20.3.0.2
    V20_3_0_3   = 0x14030003,   //! NIF Version 20.3.0.3
    V20_3_0_6   = 0x14030006,   //! NIF Version 20.3.0.6
    V20_3_0_9   = 0x14030009,   //! NIF Version 20.3.0.9
    V20_5_0_0   = 0x14050000,   //! NIF Version 20.5.0.0
    // First version to use NiSequenceData
    V20_5_0_1   = 0x14050001,   //! NIF Version 20.5.0.1
    V20_6_0_0   = 0x14060000,   //! NIF Version 20.6.0.0
    V20_6_5_0   = 0x14060500,   //! NIF Version 20.6.5.0
    V30_0_0_2   = 0x1E000002,   //! NIF Version 30.0.0.2
    V30_1_0_3   = 0x1E010003,   //! NIF Version 30.1.0.3
    UNSUPPORTED = 0xFFFFFFFF,   //! Unsupported NIF Version
    MISSING     = 0xFFFFFFFF    //! Missing NIF Version
} NIFVersion;

local string versionRegex <hidden=true> = "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){1,3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\n";

// NiObject inheritance handling
// Do not bother with declaration unless < 10.1.0.114
// This keeps 010 from spewing warnings about empty structs
#ifdef LEGACY_SUPPORT
#define NIOBJECT if ( (version > V10_0_0_0 && version < V10_1_0_114) || version < V3_3_0_13 ) NiObject base;
#define LEGACY_FLAGS if ( version >= V3_0 && version <= V10_0_1_2 ) ushort flags;
#else
#define NIOBJECT if ( version < V10_1_0_114 ) NiObject base;
#define LEGACY_FLAGS
#endif

// Data ref handling
#define DATAREF_10_1 if ( version < V10_1_0_104 ) Ref data;

// Bethesda Stream Versions
#define BS_ANY (exists(stream) && stream > 0)
#define BS_OBL (exists(stream) && stream > 0 && stream <= 11)
#define BS_FO3 (exists(stream) && stream > 11 && stream < 83)
#define BS_SKY (exists(stream) && stream == 83)
#define BS_SSE (exists(stream) && stream == 100)
#define BS_FO4 (exists(stream) && stream == 130)
#define BS_202 (exists(stream) && stream > 0 && version == V20_2_0_7)

// Divinity 2 User Versions
#define DIV2 (userVersion == 0x20000 || userVersion == 0x30000)
#define DIV2_1 (userVersion == 0x20000)
#define DIV2_2 (userVersion == 0x30000)

// WorldShift Versions
// Uses 10.(4|3|2).0.1 which are otherwise unseen. 10.4 contradicts
// the established version conditions in 10.3.
// Instead of adapting the conditions and hiding the contradiction,
// point out the contradiction by using this define.
#define WORLDSHIFT_ALL  (version == V10_4_0_1 || version == V10_3_0_1 || version == V10_2_0_1)
#define WORLDSHIFT_10_2 (version == V10_2_0_1)
#define WORLDSHIFT_10_3 (version == V10_3_0_1)
#define WORLDSHIFT_10_4 (version == V10_4_0_1)


uint Version( uint major, uint minor, uint patch, uint internal )
{
    return (major << 24) | (minor << 16) | (patch << 8) | internal;
}

uint GetVersionFromString( string verStr )
{
    local uint len, start, version;
    local int offset = 24;
    do
    {
        len = Strstr( SubStr(verStr, start), "." );
        version |= Atoi(SubStr(verStr, start, len)) << offset;
        offset -= 8;
        start += len + 1;
    } while ( len != -1 && offset >= 0 );

    return version;
}

byte IsBethesda20_2( uint version, uint userVersion ) {
    return version == V20_2_0_7 && userVersion >= 11;
}

byte IsOblivion( uint version, uint userVersion ) {
    // V10_0_1_0 is used in Oblivion but it does not have a BSStreamHeader
    return version == V10_0_1_2 || (
            (version == V20_0_0_5 || (version >= V10_1_0_0 && version <= V20_0_0_4))
            && userVersion >= 3);
}

byte IsBethesda( uint version, uint userVersion ) {
    return IsBethesda20_2( version, userVersion ) || IsOblivion( version, userVersion );
}

// Parameterless way of detecting Bethesda files
// **This can only be called after the header**
byte BSStream() {
    return exists(stream) && stream > 0;
}
