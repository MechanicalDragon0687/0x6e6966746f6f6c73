//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Objects.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NiObject
typedef struct {
    if ( version >= V10_0_0_0 && version < V10_1_0_114 )
        uint groupID;
    else if ( version <= V3_3_0_13 )
        uint linkID;
} NiObject <name="NiObject">;

// NiObjectNET
typedef struct {

#ifdef LEGACY_SUPPORT
    if ( version <= V4_2_2_0 ) {
        NiObjectNETLegacy();
        break;
    }
#endif

    // NON-LEGACY
    NIOBJECT
    STRING name;
    RefArray extraData( "Extra Data" ); // NiExtraData
    Ref controller; // NiTimeController
} NiObjectNET <name="NiObjectNET", open=true>; // Abstract


// NiAVObject 
typedef struct {

#ifdef LEGACY_SUPPORT
    if ( version <= V4_2_2_0 ) {
        NiAVObjectLegacy();
        break;
    }
#endif

    // NON-LEGACY
    NiObjectNET base;
    local string nameStr = base.name.nameStr;

    if ( stream <= 26 )
        ushort flags;
    else
        NiAVObjectFlags flags;

    Vec3 translation;
    Matrix33 rotation;
    float scale;

    if ( stream <= 34 )
        RefArray properties( "Property" ); // NiProperty

    if ( version >= Version(10, 0, 1, 0) )
        Ref NiCollisionObject;
} NiAVObject <name="NiAVObject", open=true>;


// NiPortal 
typedef struct {
    NiAVObject base;
    local string nameStr = base.nameStr;

    enum <ushort> {
        PORTAL_ACTIVE = 0x1,
        PORTAL_MARKED = 0x2,
        PORTAL_ACTIVE_MARKED = (PORTAL_ACTIVE | PORTAL_MARKED)
    } flags;
    ushort unusedPlaneCount;

    ushort numVertices;
    if ( numVertices > 0 )
        Vec3 modelVertex[numVertices];
    
    Ref adjoiner; // NiAVObject 
} NiPortal <name="NiPortal", open=false>;

// NiDynamicEffect 
typedef struct {
    NiAVObject base;
    if ( stream < 130 ) {
        if ( version >= Version(10, 1, 0, 102) )
            bool switchState;
        if ( version <= V4_0_0_2 || version >= V10_1_0_0 )
            RefArray affectedNodes( "Affected Node" ); // NiNode
    }
} NiDynamicEffect <name="NiDynamicEffect", open=true>;

// NiLight
typedef struct {
    NiDynamicEffect base;
    float dimmer;
    Color3 ambient;
    Color3 diffuse;
    Color3 specular;
} NiLight <name="NiLight", open=true>;

typedef NiLight NiDirectionalLight <name="NiDirectionalLight", open=false>;
typedef NiLight NiAmbientLight <name="NiAmbientLight", open=false>;

// NiPointLight
typedef struct {
    NiLight light;
    float constantAtten;
    float linearAtten;
    float quadraticAtten;
} NiPointLight <name="NiPointLight">;

// NiSpotLight
typedef struct {
    NiPointLight light;
    float outerSpotAngle;
    if ( version >= Version(20, 2, 0, 5) )
        float innerSpotAngle;
    float spotExponent;
} NiSpotLight <name="NiSpotLight">;

// NiTextureEffect
typedef struct {
    NiDynamicEffect base;
    Matrix33 modelProjectionMatrix;
    Vec3 modelProjectionTrans;
    FilterMode filterMode ENUM16_PAD32;
    if ( version >= Version(20, 5, 0, 4) )
        ushort maxAnisotropy;
    ClampMode clampMode ENUM16_PAD32;
    TextureType textureType;
    CoordGenType coordGenType;
    Ref texture; // NiTexture
    bool planeEnable;
    NiPlane plane;
    if ( version < Version(10, 3, 0, 4) )
        short landK[2];

#ifdef LEGACY_SUPPORT
    if ( version <= Version(4, 1, 0, 12) ) // UNVERIFIED MAX
        ushort unk;
#endif
} NiTextureEffect <name="NiTextureEffect">;

// NiCamera
typedef struct {
    NiAVObject base;
    if ( version >= Version(10, 1, 0, 0) )
        ushort obsoleteFlags;
    float frustumLeft;
    float frustumRight;
    float frustumTop;
    float frustumBottom;
    float frustumNear;
    float frustumFar;
    if ( version >= Version(10, 1, 0, 0) )
        bool useOrtho;
    float viewportLeft;
    float viewportRight;
    float viewportTop;
    float viewportBottom;
    float lodAdjust;
    Ref scene; // NiAVObject
    RefArray screenPolygons( "Polygon" ); // NiScreenPolygon array is always zero length on disk write
    Assert( screenPolygons.size == 0, "screenPolygons is an unexpected size" );
    if ( version >= Version(4, 2, 2, 0) ) { // UNVERIFIED MIN
        RefArray screenTextures( "Texture" ); // NiScreenTexture array is always zero length on disk write
        Assert( screenTextures.size == 0, "screenTextures is an unexpected size" );
    }
#ifdef LEGACY_SUPPORT
    if ( version <= Version(3, 1, 0, 0) ) // UNVERIFIED MAX
        uint unkInt;
#endif
} NiCamera <name="NiCamera">;


typedef struct {
    PixelFormat format;
    if ( version < Version(10, 3, 0, 3) || WORLDSHIFT_10_4 ) {
        uint colorMasks[4];
        uint bpp;
        ubyte oldFastCompare[8];
        if ( version >= Version(10, 1, 0, 0) )
            PixelTiling tiling;
    } else {
        uchar bitsPerPixel;
        uint rendererHint;
        uint extraData;
        uchar flags;
        PixelTiling tiling;
        if ( version >= Version(20, 3, 0, 4) )
            bool sRGBSpace;
        
        struct {
            PixelComponent componentType;
            PixelRepresentation representation;
            uchar bitsPerComponent;
            bool isSigned;
        } component[NUM_COMPS] <OPTOPEN>;
    }
} NiPixelFormat <name="NiPixelFormat", open=true>;

// NiPixelData
typedef struct {
    NIOBJECT
    NiPixelFormat pixelFormat;
    Ref palette; // NiPalette
    uint mipMapLevels;
    uint pixelStride;
    if ( mipMapLevels > 0 ) {
        struct {
            uint width;
            uint height;
            uint offsetInBytes;
        } mip[mipMapLevels] <OPTARRAY>;
    }
    uint dataSize;

    if ( version < Version(10, 3, 0, 6) || WORLDSHIFT_10_4 )
        local uint faces = 1;
    else
        uint faces;
    
    char pixelData[dataSize * faces] <open=suppress>;
} NiPixelData <name="NiPixelData">;


// NiPersistentSrcTextureRendererData
typedef struct {
    NIOBJECT
    NiPixelFormat pixelFormat;
    Ref palette; // NiPalette
    uint mipMapLevels;
    uint pixelStride;
    if ( mipMapLevels > 0 ) {
        struct {
            uint width;
            uint height;
            uint offsetInBytes;
        } mip[mipMapLevels];
    }
    uint dataSize;

    if ( version >= Version(20, 2, 0, 6) )
        uint padDataSize;
    
    uint faces;

    if ( version < Version(30, 1, 0, 1) )
        PlatformID platformID;
    else
        RendererID rendererID;

    char pixelData[dataSize * faces] <open=suppress>;
} NiPersistentSrcTextureRendererData <name="NiPersistentSrcTextureRendererData">;


// NiCollisionObject
typedef struct {
    NIOBJECT
    Ref target; // NiAVObject
} NiCollisionObject <name="NiCollisionObject">;


// NiBoundingVolume
typedef struct {
    enum <uint> {
        BASE_BV      = -1,
        SPHERE_BV    = 0,
        BOX_BV       = 1,
        CAPSULE_BV   = 2,
        LOZENGE_BV   = 3,
        UNION_BV     = 4,
        HALFSPACE_BV = 5
    } boundType;
    switch ( boundType )
    {
        case SPHERE_BV:
            Vec3 center;
            float radius;
            break;
        case BOX_BV:
            Vec3 center;
            Vec3 axis[3];
            Vec3 extent;
            break;
        case CAPSULE_BV:
            Vec3 center;
            Vec3 axis;
            float extent;
            float radius;
            break;
        case LOZENGE_BV:
            break;
        case UNION_BV:
            uint numBV;
            struct NiBoundingVolume boundingVolumes[numBV];
            break;
        case HALFSPACE_BV:
            NiPlane plane;
            Vec3 center;
            break;
    }
} NiBoundingVolume;

// NiCollisionData
typedef struct {
    NiCollisionObject base <open=true>;
    PropagationMode propagationMode;
    CollisionMode collisionMode;
    bool useABV;
    if ( useABV )
        NiBoundingVolume ABV; 
} NiCollisionData <name="NiCollisionData">;

// NiShadowGenerator
typedef struct {
    NIOBJECT
    STRING name;
    ushort flags;
    RefArray shadowCasters( "Caster" ); // NiNode
    RefArray shadowReceiver( "Receiver" ); // NiNode
    Ref effect; // NiDynamicEffect
    float depthBias;
    ushort sizeHint;
    if ( version > Version(20, 3, 0, 7) ) {
        float nearClipDistance;
        float farClipDistance;
        float directionalLightFrustumWidth;
    }
} NiShadowGenerator <name="NiShadowGenerator">;
