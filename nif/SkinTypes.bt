//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: SkinTypes.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    ushort index;
    float weight;
} SkinWeight <name="Weights", open=suppress, size=6>;

typedef struct {
    ushort index;
    hfloat weight;
} SkinWeightHalf <name="Weights", open=suppress, size=4>;

typedef struct ( bool hasWeights )  {
    NiTransform transform;
    NiBound boundingSphere;
    ushort numVerts;
    if ( hasWeights == 1 && numVerts )
        SkinWeight weights[numVerts];
    else if ( hasWeights == 0xF && numVerts )
        SkinWeightHalf weights[numVerts];
} SkinData <optimize=false>;

typedef struct {
    ushort numVerts;
    ushort numTris;
    ushort numBones;
    ushort numStrips;
    ushort numWeights;
    ushort bones[numBones];

    bool hasMap;
    if ( hasMap && numVerts )
        ushort map[numVerts];

    bool hasWeights;
    if ( hasWeights == 1 && numWeights && numVerts )
        FloatArray weights(numWeights, "Weight")[numVerts] <name="Bone Weights", optimize=true>;
    if ( hasWeights == 0xF && numWeights && numVerts )
        struct {
            hfloat weight[numWeights];
        } weights[numVerts] <name="Bone Weights", optimize=true>;
    
    if ( numStrips ) {
        ushort stripLength[numStrips];
        bool hasFaces;
        if ( hasFaces ) {
            struct {
                local int j = 0;
                for ( j; j < numStrips; j++ ) {
                    if ( stripLength[j] > 0 ) {
                        struct {
                            ushort strip[stripLength[j]] <optimize=false>;
                        } strip <optimize=false>;
                    }
                }
            } strips;
        }
    } else {
        bool hasFaces;
        if ( hasFaces && numTris )
            Triangle triangle[numTris];
    }

    bool hasBoneIndices;
    if ( hasBoneIndices && numWeights && numVerts )
        UByteArray boneIndices(numWeights, "Index")[numVerts] <name="Bone Indices", optimize=true>;

    if ( file.stream > 34 )
        ushort unk;

    if ( file.stream == 100 )
    {
        VertexDesc vertexDesc;
        Triangle tris[numTris];
    }
} SkinPartition <optimize=false>;

typedef struct {
    ushort partFlag;
    ushort partType;
} BSBodyPartList <open=true, size=4>;

// Stream 130

typedef struct {
    NiBound boundingSphere;
    NiTransform transform;
} BSSkinBoneTrans <open=true, optimize=true, size=68>;
