//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: AnimTypes.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct ( KeyType i ) {
    float time;
    Vec3 value;
    if ( i == QUADRATIC_KEY ) {
        Vec3 forward;
        Vec3 backward;
    }
    if ( i == TBC_KEY )
        TBC tbc;
} Vec3Key <name="Vector3 Key">;

typedef struct ( string str ) {
    local string name <hidden=true> = str;
    uint numKeys;
    if ( numKeys > 0 ) {
        KeyType interpolation;
        Vec3Key key(interpolation)[numKeys] <optimize=true>;
    }
} Vec3KeyGrp <name=Vec3KeyGrpName>;

typedef struct ( KeyType i ) {
    float time;
    Vec4 value;
    if ( i == QUADRATIC_KEY ) {
        Vec4 forward;
        Vec4 backward;
    }
    if ( i == TBC_KEY )
        TBC tbc;
} Vec4Key <name="Vector4 Key">;

typedef struct ( string str ) {
    local string name <hidden=true> = str;
    uint numKeys;
    if ( numKeys > 0 ) {
        KeyType interpolation;
        Vec4Key key(interpolation)[numKeys] <optimize=true>;
    }
} Vec4KeyGrp <name=Vec4KeyGrpName>;

typedef struct ( KeyType i ) {
    float time;
    float value;
    if ( i == QUADRATIC_KEY ) {
        float forward;
        float backward;
    }
    if ( i == TBC_KEY )
        TBC tbc;
} FloatKey <name="Float Key">;

typedef struct ( string str ) {
    local string name <hidden=true> = str;
    uint numKeys;
    if ( numKeys > 0 ) {
        KeyType interpolation;
        FloatKey key(interpolation)[numKeys] <optimize=true>;
    }

} FloatKeyGrp <name=FloatKeyGrpName>;

typedef struct {
    uint numRotKeys;
    if ( numRotKeys > 0 ) {
        KeyType rotType;
        if ( rotType != XYZ_ROTATION_KEY ) {
            Vec4Key rotations(rotType)[numRotKeys] <optimize=true>;
        } else if ( rotType == XYZ_ROTATION_KEY ) {
            if ( version < Version(10, 1, 0, 104) )
                int order;
            FloatKeyGrp rotationX( "X" );
            FloatKeyGrp rotationY( "Y" );
            FloatKeyGrp rotationZ( "Z" );
        }
    }
} RotKeyGrp <name="Rotation Keys">;

typedef struct ( KeyType i ) {
    float time;
    byte value;
    if ( i == QUADRATIC_KEY ) {
        byte forward;
        byte backward;
    }
    if ( i == TBC_KEY )
        TBC tbc;
} BoolKey <name="Bool Key">;

typedef struct ( string str ) {
    local string name <hidden=true> = str;
    uint numKeys;
    if ( numKeys > 0 ) {
        // Do not read KeyType for < 10.1.0.104
        if ( version >= Version(10, 1, 0, 104) )
            KeyType interpolation;
        else
            local KeyType interpolation = CONST_KEY;

        if ( numKeys > 0 )
            BoolKey key(interpolation)[numKeys] <optimize=true>;
    }
} BoolKeyGrp <name=BoolKeyGrpName>;

typedef struct ( KeyType i ) {
    float time;
    STRING value;
    if ( i == QUADRATIC_KEY ) {
        STRING forward;
        STRING backward;
    }
    if ( i == TBC_KEY )
        TBC tbc;
} StringKey <name="String Key">;

typedef struct ( string str ) {
    local string name <hidden=true> = str;
    uint numKeys;
    if ( numKeys > 0 ) {
        KeyType interpolation;
        if ( numKeys > 0 )
            StringKey key(interpolation)[numKeys] <optimize=true>;
    }
} StringKeyGrp <name=StringKeyGrpName>;

// NAME FUNCTIONS

string Vec3KeyGrpName ( Vec3KeyGrp& g )
{
    return g.name + " Keys";
}

string Vec4KeyGrpName ( Vec4KeyGrp& g )
{
    return g.name + " Keys";
}

string FloatKeyGrpName ( FloatKeyGrp& g )
{
    return g.name + " Keys";
}

string BoolKeyGrpName ( BoolKeyGrp& g )
{
    return g.name + " Keys";
}

string StringKeyGrpName ( StringKeyGrp& g )
{
    return g.name + " Keys";
}
