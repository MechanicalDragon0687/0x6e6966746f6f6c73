//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: Anim.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    SSTRING name;
    Ref object;
} AVOBJ <name="AV Object", open=true>;

typedef struct {
    NIOBJECT
    Ref scene;
    uint numObjs;
    if ( numObjs > 0 )
        AVOBJ object[numObjs] <optimize=false>;
} NiAVObjPalette <name="NiDefaultAVObjectPalette">;

typedef struct {
    NIOBJECT
    Ref nextController;
    TimeControllerFlags flags;
    float frequency;
    float phase;
    float startTime;
    float stopTime;
    Ref target;
} NiTimeController <open=true>; // Abstract

typedef NiTimeController NiInterpController <open=true>; // Abstract

typedef struct {
    NiTimeController controller;
    if ( version >= Version(10, 1, 0, 104) )
        Ref interpolator;
} NiSingleInterpController <open=true>; // Abstract

typedef NiSingleInterpController NiFloatInterpController <open=true>; // Abstract
typedef NiSingleInterpController NiBoolInterpController <open=true>; // Abstract


typedef enum <ushort> { TC_AMBIENT, TC_DIFFUSE, TC_SPECULAR, TC_SELF_ILLUM } TargetColor;

typedef struct {
    NiSingleInterpController controller;
    if ( version >= Version(10, 1, 0, 0) )
        TargetColor targetColor;
    DATAREF_10_1 // NiPosData
} NiLightColorCtlr <name="NiLightColorController">;

typedef struct {
    NiBoolInterpController controller;
    DATAREF_10_1 // NiVisData
} NiVisCtlr <name="NiVisController", open=false>;

// Extra Data Controllers

typedef struct {
    NiSingleInterpController controller;
    STRING extraDataName;
} NiExtraDataController <open=true>; // Abstract

typedef struct {
    NiExtraDataController controller;
    DATAREF_10_1 // NiFloatData
} NiFloatEDCtlr <name="NiFloatExtraDataController">;

typedef struct {
    NiExtraDataController controller;
    int extraDataIndex;
    DATAREF_10_1 // NiFloatData
} NiFloatsEDCtlr <name="NiFloatsExtraDataController">;

typedef NiFloatsEDCtlr NiFloatsEDPoint3Ctlr <name="NiFloatsExtraDataPoint3Controller">;

typedef struct {
    NiExtraDataController controller;
    DATAREF_10_1 // NiColorData
} NiColorEDCtlr <name="NiColorExtraDataController">;


typedef struct {
    // NiControllerSequence::InterpArrayItem
    Ref interpolator;
    Ref controller;
    if ( BSStream() )
        byte priority;
    if ( version < Version(10, 1, 0, 111) ) {
        Ref blendInterp;
        ushort blendIndex;
    }
    // NiControllerSequence::IDTag
    if ( version >= Version(10, 2, 0, 0) && version < Version(20, 1, 0, 1) ) {
        Ref palette; // NiStringPalette
        uint AVObjectName;
        uint propertyType;
        uint controllerType;
        uint controllerID;
        uint interpolatorID;
    } else {
        STRING AVObjectName;
        STRING propertyType;
        STRING controllerType;
        STRING controllerID;
        STRING interpolatorID;
    }
} ControlledBlock <name="Controlled Block">;

typedef struct {
    NIOBJECT
    STRING name;
    if ( DIV2 ) {
        uint numUnkInt;
        if ( numUnkInt > 0 )
            uint unkInt[numUnkInt];
        Ref unkRef;
    }
    uint numBlocks;
    uint arrayGrowBy;
    if ( numBlocks > 0 )
        if ( version < V10_2_0_0 ) // Should not be optimized < 10.2
            ControlledBlock block[numBlocks] <optimize=false>;
        else
            ControlledBlock block[numBlocks] <optimize=true>;

    float weight;
    Ref textKey;
    CycleType cycleType ENUM16_PAD32;
    float frequency;
    if ( version < Version(10, 3, 0, 1) || WORLDSHIFT_10_4 )
        float phase;
    float beginKeyTime;
    float endKeyTime;
    Ref owner; // NiControllerManager
    STRING accumRootName;
    if ( version >= Version(20, 3, 0, 8) )
        uint accumFlags;
    if ( version >= Version(10, 1, 0, 113) && version < Version(20, 1, 0, 1) )
        Ref palette; // NiStringPalette

    if ( stream > 11 && stream <= 28 )
        Ref animNotes; // BSAnimNotes
    else if ( stream > 28 )
        RefArray16 animNotes( "Anim Notes" ) <optimize=false>; // BSAnimNotes.. Multidimensional?
} NiControllerSequence <name="NiControllerSequence">;

typedef struct {
    NiTimeController controller;
    bool cumulativeAnim;
    RefArray sequence( "Sequence" ); // NiControllerSequence
    if ( version >= Version(10, 1, 0, 104) )
        Ref objectPalette; // NiDefaultAVObjectPalette
} NiControllerMgr <name="NiControllerManager">;

typedef struct {
    NIOBJECT
    BinaryData data;
    uint dataEnd;
} NiStringPalette <name="NiStringPalette">;

typedef struct {
    NiTimeController controller;
    if ( version < Version(10, 1, 0, 104) )
        Ref data; // NiKeyframeData/NiTransformData
    else
        Ref interpolator; // NiInterpolator
} NiKeyframeCtlr <name="NiKeyframeController">;

// Renamed to NiTransformController in 10.2
typedef NiKeyframeCtlr NiTransCtlr <name="NiTransformController">;

// Deprecated in 10.2, use NiTransformController & NiPathInterpolator
typedef struct {
    NiTimeController controller;
    if ( version >= Version(10, 1, 0, 0) )
        PathFlags flags;
    enum <int> {
        BANK_NEGATIVE = -1,
        BANK_POSITIVE = 1
    } bankDir;
    float maxBankAngle;
    float smoothing;
    short followAxis;
    Ref pathData; // NiPosData
    Ref pctData;  // NiFloatData
} NiPathController <name="NiPathController">;

// Deprecated in 10.2, use NiTransformController & NiLookAtInterpolator
typedef struct {
    NiTimeController controller;
    DATAREF_10_1 // NiFloatData
} NiRollController <name="NiRollController">;

// Deprecated in 10.2, use NiTransformController & NiLookAtInterpolator
typedef struct {
    NiTimeController controller;
    if ( version >= Version(10, 1, 0, 0) )
        LookAtFlags flags;
    Ref target; // NiAVObject
} NiLookAtController <name="NiLookAtController">;

typedef struct {
    NiInterpController controller;
    RefArray16 targets( "Target" ); // NiAVObject
} NiMultiTransCtlr <name="NiMultiTargetTransformController">;

typedef struct {
    NiFloatInterpController controller;
    uint affectedMap;
    if ( version < Version(10, 1, 0, 104) ) {
        float startTime;
        float secondsPerFrame;
    }
    RefArray textures( "Texture" ); // NiTexture
} NiFlipController <name="NiFlipController">;

typedef struct {
    NiInterpController controller;
    uint count;
    RefArray interpolators( "Interpolator" );
    StringArray targetNames;
} NiMorphWeightsController <name="NiMorphWeightsController">;

typedef struct {
    NiTimeController controller;
    int lod;
    uint numLODs;
    uint numBones;
    if ( numBones > 0 )
        RefArray nodeSets( "Bone" )[numBones] <optimize=false>; // NiNode
    
    // There are no signs of a minimum version for these values in Gamebryo
    // but they are not present in Bethesda NIFs. The XML uses == 20.3.0.9
    // which is incorrect because Gamebryo says it should always be present.
    if ( !BSStream() ) {
        uint numSkins;
        if ( numSkins > 0 ) {
            struct {
                uint size;
                if ( size > 0 ) {
                    Ref skinGeometry[size]; // NiTriBasedGeom
                    Ref skinInstance[size]; // NiSkinInstance
                }
            } skinInfos[numSkins] <optimize=false>;
        }
        RefArray skins( "Skin" ); // NiTriBasedGeom
    }
} NiBoneLODController <name="NiBoneLODController">;

typedef struct {
    NiTimeController controller;
    uint currentLOD;
    RefArray bones( "Bone" );
    RefArray skins( "Skin" );

    uint numLevels;
    if ( numLevels > 0 ) {
        struct {
            uint numBones;
            uint numActiveSkins;
            if ( numActiveSkins > 0 ) {
                uint skin[numActiveSkins];
            }
        } lodLevel[numLevels] <optimize=false>;
    }
} NiSkinningLODController <name="NiSkinningLODController">;

typedef struct {
    NiFloatInterpController controller;
    DATAREF_10_1 // NiFloatData
} NiAlphaController <name="NiAlphaController", open=false>;

typedef NiFloatInterpController NiLightRadiusCtlr <name="NiLightRadiusController", open=false>;
typedef NiFloatInterpController NiLightDimmerCtlr <name="NiLightDimmerController", open=false>;

// BETHESDA

typedef struct {
    NiTimeController controller;
    Ref interpolator; // NiFloatInterpolator
} BSFrustumCtlr <name="BSFrustumFOVController">;

typedef struct {
    NiFloatInterpController controller;
    BSLSPControlledVariable controlledVariable;
} BSLSPFloatCtlr <name="BSLightingShaderPropertyFloatController">;

typedef struct {
    NiFloatInterpController controller;
    BSLSPControlledColor controlledColor;
} BSLSPColorCtlr <name="BSLightingShaderPropertyColorController">;

typedef struct {
    NiFloatInterpController controller;
    BSESPControlledVariable controlledVariable;
} BSESPFloatCtlr <name="BSEffectShaderPropertyFloatController">;

typedef struct {
    NiFloatInterpController controller;
    BSESPControlledColor controlledColor;
} BSESPColorCtlr <name="BSEffectShaderPropertyColorController">;

typedef NiAlphaController BSNiAlphaCtlr <name="BSNiAlphaPropertyTestRefController", open=false>;
typedef NiBoneLODController NiBSBoneLODCtlr <name="NiBSBoneLODController">;
typedef NiSingleInterpController BSRefractionFirePeriodCtlr <name="BSRefractionFirePeriodController", open=false>;

// BSLagBoneController
typedef struct {
    NiTimeController controller;
    float linearVelocity;
    float linearRotation;
    float maxDistance;
} BSLagBoneCtlr <name="BSLagBoneController">;

// BSProceduralLightningController
typedef struct {
    NiTimeController controller;
    Ref generationInterp;
    Ref mutationInterp;
    // Generation
    Ref subdivisionInterp;
    Ref numBranchesInterp;
    Ref numBranchesVarInterp;
    // Process
    Ref lengthInterp;
    Ref lengthVarInterp;
    Ref widthInterp;
    Ref arcOffsetInterp;
    // Generation Params
    ushort subdivisions;
    ushort numBranches;
    ushort numBranchesVariation;
    // Process Params
    float length;
    float lengthVariation;
    float width;
    float childWidthMult;
    float arcOffset;
    bool fadeMainBolt;
    bool fadeChildBolts;
    bool animateArcOffset;
    Ref shaderProperty;
} BSPLightningCtlr <name="BSProceduralLightningController">;

// DATA

typedef struct {
    NIOBJECT
    RotKeyGrp rotations;
    Vec3KeyGrp translations( "Translation" );
    FloatKeyGrp scales( "Scale" );
} NiKFData <name="NiKeyFrameData">;

// Renamed to NiTransformData in 10.2
typedef NiKFData NiTransformData <name="NiTransformData">;

typedef struct {
    NIOBJECT
    Vec3KeyGrp positions( "Position" );
} NiPosData <name="NiPosData">;


// Deprecated in 10.2
typedef struct {
    NIOBJECT
    BoolKeyGrp data( "Bool" );
} NiVisData <name="NiVisData">;

// Renamed to NiBoolData in 10.2
typedef NiVisData NiBoolData <name="NiBoolData">;

typedef struct {
    NIOBJECT
    FloatKeyGrp data( "Float" );
} NiFloatData <name="NiFloatData">;

typedef struct {
    NIOBJECT
    uint numControlPoints;
    if ( numControlPoints > 0 )
        float controlPoints[numControlPoints];
    uint numCompactControlPoints;
    if ( numCompactControlPoints > 0 )
        short compactControlPoints[numCompactControlPoints];
} NiBSplineData <name="NiBSplineData">;

typedef struct {
    NIOBJECT
    uint quantity;
} NiBSplineBasisData <name="NiBSplineBasisData">;


// INTERPOLATORS

typedef struct {
    NIOBJECT
} NiInterpolator <name="NiInterpolator">; // Abstract

#define NIINTERP NiInterpolator base;

typedef struct {
    NIINTERP
    BlendInterpFlags flags;
    byte arraySize;
    float weightThreshold;
    if ( !(flags.value & BI_MANAGER_CONTROLLED) ) {
        byte interpCount;
        byte singleIndex;
        char highPriority;
        char nextHighPriority;
        float singleTime;
        float highSumOfWeights;
        float nextHighSumOfWeights;
        float highEaseSpinner;
        if ( arraySize ) {
            struct {
                Ref interpolator;
                float weight;
                float normalizedWeight;
                byte priority;
                float easeSpinner;
            } interpArrayItem[arraySize] <optimize=true>;
        }
    }
} NiBlendInterpolator <name="NiBlendInterpolator", open=true>; // Abstract

typedef struct {
    NIINTERP
} NiKeyBasedInterpolator <name="NiKeyBasedInterpolator">; // Abstract

#define NIBLENDINTERP NiBlendInterpolator base;
#define NIKBINTERP NiKeyBasedInterpolator base;

typedef struct {
    NIKBINTERP
    byte value; // NiBool value of 2 means Invalid, basically the "undefined" value like uint/float
    Ref data; // NiBoolData
} NiBoolInterp <name="NiBoolInterpolator">;

typedef NiBoolInterp NiBoolTimeInterp <name="NiBoolTimelineInterpolator">;

typedef struct {
    NIBLENDINTERP
    byte value;
} NiBlendBool <name="NiBlendBoolInterpolator">;

typedef struct {
    NIKBINTERP
    float value;
    Ref data; // NiFloatData
} NiFloatInterp <name="NiFloatInterpolator">;

typedef struct {
    NIBLENDINTERP
    float value;
} NiBlendFloat <name="NiBlendFloatInterpolator">;

typedef struct {
    NIKBINTERP
    NiQuatTransform transform;
    Ref data; // NiTransformData
} NiTransformInterp <name="NiTransformInterpolator">;

typedef struct {
    NIBLENDINTERP
} NiBlendTransformInterp <name="NiBlendTransformInterpolator">;

typedef struct {
    NIKBINTERP
    Vec3 point;
    Ref data; // NiPosData
} NiPoint3Interp <name="NiPoint3Interpolator">;

typedef struct {
    NIBLENDINTERP
    Vec3 point;
} NiBlendPoint3 <name="NiBlendPoint3Interpolator">;

typedef struct {
    NIKBINTERP
    Color4 color;
    Ref data; // NiColorData
} NiColorInterp <name="NiColorInterpolator">;

typedef struct {
    NIBLENDINTERP
    Color4 color;
} NiBlendColor <name="NiBlendColorInterpolator">;

typedef struct {
    NIKBINTERP
    LookAtFlags flags;
    Ref lookAt;
    STRING lookAtName;
    if ( version < Version(20, 4, 0, 13) )
        NiQuatTransform transform;
    Ref translateInterp;
    Ref rollInterp;
    Ref scaleInterp;
} NiLookAtInterp <name="NiLookAtInterpolator">;

// NiPathInterpolator
typedef struct {
    NIKBINTERP
    PathFlags flags;
    uint bankDir;
    float maxBankAngle;
    float smoothing;
    ushort followAxis;
    Ref pathData; // NiPosData
    Ref percentData; // NiFloatData
} NiPathInterp <name="NiPathInterpolator">;

// NiBSplineInterpolator
typedef struct {
    NIINTERP
    float startTime;
    float endTime;
    Ref data; // NiBSplineData
    Ref basisData; // NiBSplineBasisData
} NiBSplineInterpolator <name="NiBSplineInterpolator">;

typedef struct {
    NiBSplineInterpolator base;
    float value;
    uint valueHandle;
} NiBSplineFloatInterpolator <name="NiBSplineFloatInterpolator">;

typedef struct {
    NiBSplineInterpolator base;
    NiQuatTransform transform;
    uint transCPHandle;
    uint rotationCPHandle;
    uint scaleCPHandle;
} NiBSplineTransformInterpolator <name="NiBSplineTransformInterpolator">;

typedef struct {
    NiBSplineInterpolator base;
    Vec3 value;
    uint valueHandle;
} NiBSplinePoint3Interpolator <name="NiBSplinePoint3Interpolator">;

typedef struct {
    NiBSplineFloatInterpolator base;
    float compScalars[2];
} NiBSplineCompFloatInterpolator <name="NiBSplineCompFloatInterpolator">;

typedef struct {
    NiBSplineTransformInterpolator base;
    float compScalars[6];
} NiBSplineCompTransformInterpolator <name="NiBSplineCompTransformInterpolator">;

typedef struct {
    NiBSplinePoint3Interpolator base;
    float compScalars[2];
} NiBSplineCompPoint3Interpolator <name="NiBSplineCompPoint3Interpolator">;

// BETHESDA

typedef NiTransformInterp BSRotAccumTransfInterp <name="BSRotAccumTransfInterpolator", open=false>;

typedef struct {
    NIKBINTERP
    uint numInfo;
    if ( numInfo > 0 )
        struct {
            STRING name;
            NiQuatTransform transformA;
            NiQuatTransform transformB;
        } infos[numInfo] <OPTARRAY>;
    Ref data;
} BSTreadTransfInterp <name="BSTreadTransfInterpolator">;

// Legacy Anim

typedef NiFloatInterpController BSMatEmitMultCtlr <name="BSMaterialEmittanceMultController", open=false>;
typedef NiFloatInterpController BSRefractionStrCtlr <name="BSRefractionStrengthController", open=false>;
typedef NiLightColorCtlr NiMaterialColorCtlr <name="NiMaterialColorController">;

typedef enum <uint> {
    TT_TRANSLATE_U = 0,
    TT_TRANSLATE_V,
    TT_ROTATE,
    TT_SCALE_U,
    TT_SCALE_V
} TransformMember;

typedef struct {
    NiFloatInterpController controller;
    bool shaderMap;
    uint texType;
    TransformMember texTransType;
    DATAREF_10_1 // NiFloatData
} NiTextureTransformCtlr <name="NiTextureTransformController">;

typedef struct ( uint numVerts ) {
    if ( version >= Version(10, 1, 0, 104) ) {
        STRING frameName;
        if ( version < Version(20, 1, 0, 3) && !BS_OBL )
            float weight;
    } else {
        uint numKeys;
        // Key Type is read regardless of numKeys for NiMorphData
        KeyType interpolation;
        if ( numKeys > 0 )
            FloatKey key(interpolation)[numKeys] <optimize=true>;
    }

    if ( numVerts > 0 )
        Vec3 vector[numVerts];
} Morph;

typedef struct {
    NIOBJECT
    uint numMorphs;
    uint numVertices;
    bool relativeTargets;
    if ( numMorphs > 0 )
        Morph morph(numVertices)[numMorphs] <optimize=false>;
} NiMorphData <name="NiMorphData">;

typedef struct {
    NIOBJECT
    Vec4KeyGrp data( "Color" ); // Color4
} NiColorData <name="NiColorData">;

typedef struct {
    NiInterpController controller;
    enum <ushort> {
        GMC_UPDATE_NORMALS = 0x1
    } flags;
    Ref data; // NiMorphData
    bool alwaysUpdate;

    if ( version >= Version(10, 1, 0, 104) ) {
        if ( version < Version(20, 1, 0, 3) ) {
            RefArray interpolators( "Interpolator" ); // NiInterpolator
            if ( BS_OBL ) {
                uint numUnk;
                if ( numUnk > 0 )
                    float unk[numUnk];
            }
        } else {
            uint numTargets;
            if ( numTargets > 0 )
                struct {
                    Ref interpolator;
                    float weight;
                } interpItem[numTargets];
        }
    }
} NiGeomMorpherCtlr <name="NiGeomMorpherController">;

typedef struct {
    NiTimeController controller;
    uint keys;
} bhkBlendController <name="bhkBlendController">;

typedef enum<uint> {
    ANT_INVALID = 0,
    ANT_GRABIK = 1,
    ANT_LOOKIK = 2
} AnimNoteType;

typedef struct {
    NIOBJECT
    AnimNoteType type; // BSAnimNote::AnimNoteType
    float time;
    if ( type == ANT_GRABIK )
        uint arm; // GRABIK_ARM
    if ( type != ANT_INVALID ) {
        float gain;
        uint state; // GRABIK_STATE / LOOKIK_STATE
    }
} BSAnimNote <name="BSAnimNote">;

typedef struct {
    NIOBJECT
    RefArray16 animNotes( "Anim Note" ); // BSAnimNote
} BSAnimNotes <name="BSAnimNotes">;

