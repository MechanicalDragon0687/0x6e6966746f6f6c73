//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: ExtraData.bt
//   Authors: jonwd7
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    NIOBJECT
    if ( version >= Version(10, 0, 1, 0) )
        STRING name;
    else
        Ref nextED;

    if ( version <= Version(4, 2, 2, 0) ) {
        // Block used directly in 3.3.0.13
        BinaryData data;
    }
} NiExtraData <name="NiExtraData", read=ReadED>;

typedef struct {
    NiExtraData data;
    bool boolData;
} NiBoolED <name="NiBooleanExtraData", read=ReadBoolED>;

typedef struct {
    NiExtraData data;
    float floatData;
} NiFloatED <name="NiFloatExtraData", read=ReadFloatED>;

typedef struct {
    NiExtraData data;
    FloatArraySz floatsData( "Float Data", 4 );
} NiFloatsED <name="NiFloatsExtraData", read=ReadFloatsED>;

typedef struct {
    NiExtraData data;
    uint integerData;
} NiIntegerED <name="NiIntegerExtraData", read=ReadIntED>;

typedef struct {
    NiExtraData data;
    UIntArraySz integersData( "Integer Data", 4 );
} NiIntegersED <name="NiIntegersExtraData", read=ReadIntsED>;

typedef struct {
    NiExtraData data;
    if ( version > Version(4, 2, 2, 0) )
        STRING stringData;
} NiStringED <name="NiStringExtraData", read=ReadStringED>;

typedef struct {
    NiExtraData data;
    uint numStrings;
    if ( numStrings > 0 )
        SSTRING stringData[numStrings] <optimize=false>;
} NiStringsED <name="NiStringsExtraData">;

typedef struct {
    NiExtraData data;
    uint numKeys;
    if ( numKeys > 0 ) {
        if ( version < V20_1_0_1 )
            StringKey keys(1)[numKeys] <optimize=false>;
        else
            StringKey keys(1)[numKeys] <optimize=true>;
    }
} NiTextKeyED <name="NiTextKeyExtraData">;

typedef struct {
    NiExtraData data;
    BinaryData binaryData;
} NiBinaryED <name="NiBinaryExtraData">;

typedef struct {
    NiExtraData data;
    Color4 colorData;
} NiColorED <name="NiColorExtraData">;

typedef struct {
    NiExtraData data;
    Vec4 colorData;
} NiVectorED <name="NiVectorExtraData">;


// BSXFlags
typedef struct { 
    NiExtraData data;
    uint integerData;
} BSXFlags <name="BSXFlags">;

typedef struct {
    NiExtraData data;
    STRING filepath;
    bool controlsBaseSkel;
} BSBGED <name="BSBehaviorGraphExtraData">;

typedef struct {
    NiExtraData data;
    ushort rotX;
    ushort rotY;
    ushort rotZ;
    float zoom;
} BSInvMarker <name="BSInvMarker">;

typedef enum <ushort> {
    Sit = 1,
    Sleep = 2,
    Lean = 4
} FurnAnimType;

typedef enum <ushort> {
    Front = 1 << 0,
    Behind = 1 << 1,
    Right = 1 << 2,
    Left = 1 << 3,
    Up = 1 << 4
} FurnEntryPoints;

typedef struct {
    Vec3 offset;
    if ( stream > 34 ) {
        float heading;
        FurnAnimType animationType;
        FurnEntryPoints entryPoints;
    } else {
        ushort orientation; // 3141 = 3.141 (radians)
        byte positionRef1;
        byte positionRef2;
    }
} FurnPos;

typedef struct {
    NiExtraData data;
    uint numPos;
    if ( numPos > 0 )
        FurnPos pos[numPos] <optimize=true>;
} BSFurnitureMarker <name="BSFurnitureMarker">;

typedef BSFurnitureMarker BSFurnitureMarkerNode <name="BSFurnitureMarkerNode">;

// BSBoneLODExtraData
typedef struct {
    NiExtraData data;
    uint numBoneLOD;
    if ( numBoneLOD > 0 )
        struct {
            uint distance;
            STRING bone;
        } boneLOD[numBoneLOD] <optimize=true>;
} BSBoneLODED <name="BSBoneLODExtraData">;

// BSBound
typedef struct {
    NiExtraData data;
    Vec3 center;
    Vec3 halfExtents;
} BSBound <name="BSBound">;

// BSDecalPlacementVectorExtraData
typedef struct {
    NiFloatED data <open=true>;
    ushort numVectorArrays;
    if ( numVectorArrays > 0 )
        struct {
            ushort numVectors;
            if ( numVectors > 0 ) {
                Vec3 points[numVectors];
                Vec3 normals[numVectors];
            }
        } vectorArray[numVectorArrays] <optimize=false>;
} BSDecalPlacementVectorED <name="BSDecalPlacementVectorExtraData">;

// BSDistantObjectLargeRefExtraData
typedef struct {
    NiExtraData data;
    bool isLargeRef;
} BSDistantObjectLargeRefED <name="BSDistantObjectLargeRefExtraData">;

typedef NiIntegersED BSWArray <name="BSWArray">;

// BSEyeCenterExtraData
typedef struct {
    NiExtraData data;
    uint numData;
    if ( numData > 0 )
        float floatData[numData];
} BSEyeCenterED <name="BSEyeCenterExtraData">;

// BSPositionData
typedef struct {
    NiExtraData data;
    uint numData;
    if ( numData > 0 )
        hfloat floatData[numData];
} BSPositionData <name="BSPositionData">;

typedef struct {
    SSTRING parent;
    SSTRING name;
    Quat rotation;
    Vec3 translation;
    float scale;
} BSConnectPoint;

// BSConnectPoint::Parents
typedef struct {
    NiExtraData data;
    uint numConnectPoints;
    if ( numConnectPoints > 0 )
        BSConnectPoint connectPoint[numConnectPoints] <optimize=false>;
} BSConnectPtParents <name="BSConnectPoint::Parents">;

// BSConnectPoint::Children
typedef struct {
    NiExtraData data;
    bool isSkinned;
    uint numPoints;
    if ( numPoints > 0 )
        SSTRING name[numPoints] <optimize=false>;
} BSConnectPtChildren <name="BSConnectPoint::Children">;

// BSClothExtraData
typedef BinaryData BSClothExtraData <name="BSClothExtraData">;

typedef struct {
    uint triCount;
    uint triOffset;
} LODLevel;

typedef struct {
    float g2pScale;
    NiTransform transform;
    NiBound bound;
} GeomData;

typedef struct {
    NiExtraData data;
    VertexDesc desc <open=false>;
    uint numVerts;
    uint numTris;
    uint unk1;
    uint unk2;
    uint numObjects;
    if ( numObjects > 0 ) {
        uint64 shapeID[numObjects] <optimize=true>;
        struct {
            uint numVerts;
            uint lodLevels;
            if ( lodLevels > 0 )
                LODLevel lodLevel[lodLevels] <optimize=true>;
            
            // LOD Levels necessary for tri count
            Assert( lodLevels == 3, "lodLevels must be 3." );

            uint numCombined;
            if ( numCombined > 0 )
               GeomData combined[numCombined] <optimize=true>;
            
            VertexDesc vertexDesc <open=false>;
        } object[numObjects] <optimize=false>;
    }
} BSPackedCombinedSharedGeomDataExtra <name="BSPackedCombinedSharedGeomDataExtra">;

typedef struct {
    NiExtraData data;
    VertexDesc desc;
    uint numVertsTotal;
    uint numTrisTotal;
    uint unk1;
    uint unk2;
    uint numObjects;
    if ( numObjects > 0 ) {
        struct {
            uint numVerts;
            uint lodLevels;
            if ( lodLevels > 0 )
                LODLevel lodLevel[lodLevels] <optimize=true>;
            
            // LOD Levels necessary for tri count
            Assert( lodLevels == 3, "lodLevels must be 3." );
            
            // Sum up tris from LOD levels
            local uint numTris;
            local uint i;
            for ( i = 0; i < lodLevels; i++ )
                numTris += lodLevel[i].triCount;
            
            uint numCombined;
            if ( numCombined > 0 )
                GeomData combined[numCombined] <optimize=true>;
            
            VertexDesc vertexDesc <open=false>;
            BSVertexData vertexData(vertexDesc.value)[numVerts] <OPTARRAY>;
            Triangle triangles[numTris] <optimize=true>;
        } object[numObjects] <optimize=false>;
    }
} BSPackedCombinedGeomDataExtra <name="BSPackedCombinedGeomDataExtra">;

// READ FUNCTIONS

string ReadED( NiExtraData& ed )
{
    return (exists(ed.name)) ? ReadSTRING(ed.name) : "";
}

string ReadBoolED( NiBoolED& ed )
{
    string s;
    string b = "True";
    if ( ed.boolData == 0 )
        b = "False";
    
    if ( exists(ed.data.name) )
        SPrintf(s, "%s: %s", ReadSTRING(ed.data.name), b);

    return s;
}

string ReadFloatED( NiFloatED& ed )
{
    string s;
    if ( exists(ed.data.name) )
        SPrintf(s, "%s: %f", ReadSTRING(ed.data.name), ed.floatData);
    return s;
}

string ReadFloatsED( NiFloatsED& ed )
{
    string s;
    if ( exists(ed.data.name) )
        SPrintf(s, "%s (Size: %u)", ReadSTRING(ed.data.name), ed.floatsData.size);
    return s;
}

string ReadIntED( NiIntegerED& ed )
{
    string s;
    if ( exists(ed.data.name) )
        SPrintf(s, "%s: %u", ReadSTRING(ed.data.name), ed.integerData);
    return s;
}

string ReadIntsED( NiIntegersED& ed )
{
    string s;
    if ( exists(ed.data.name) )
        SPrintf(s, "%s (Size:%u)", ReadSTRING(ed.data.name), ed.integersData.size);
    return s;
}

string ReadStringED( NiStringED& ed )
{
    string s;
    if ( exists(ed.data.name) )
        SPrintf(s, "%s: %s", ReadSTRING(ed.data.name), ReadSTRING(ed.stringData));
    return s;
}
